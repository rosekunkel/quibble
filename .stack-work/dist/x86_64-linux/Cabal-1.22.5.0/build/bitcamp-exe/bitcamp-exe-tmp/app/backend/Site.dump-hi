
==================== FINAL INTERFACE ====================
2016-04-10 08:25:18.851227 UTC

interface main@main:Site 7103
  interface hash: 8cb5e12330a080cbae96a138c58d044c
  ABI hash: 6c82c94233f4b31745f678372e2be7b3
  export-list hash: 8858319ab6fcba7d1bb2fd1a4d2574a4
  orphan hash: da62e95dcee7b9517362202ec414b715
  flag hash: 2a8d5389c7ad5a752ff2178c6a4e3858
  sig of: Nothing
  used TH splices: True
  where
exports:
  Site.app
module dependencies: Application
package dependencies: MonadCatchIO-transformers-0.3.1.3@Monad_BSHaJtnktpVL405Pj6vJr0
                      MonadRandom-0.4.2.2@Monad_LbaXJr6Nhqd7LxAzlRvHiO
                      StateVar-1.1.0.3@State_8WYLUQJECQz8PFb9p2aPSq
                      adjunctions-4.3@adjun_IXq6HBAgCNJ4fv6ViFbOEG
                      aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      attoparsec-enumerator-0.3.4@attop_4GSVinFkr5CKwtahYaIeFt
                      attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG base-4.8.2.0
                      base-orphans-0.5.3@baseo_4lH3gPOjJvdDgDLhAat0cc
                      bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      blaze-builder-0.4.0.1@blaze_4KI2nf4lf9oHEgXiILyTYj
                      blaze-builder-enumerator-0.2.1.0@blaze_Gmwy3P2062lB78VkiFsmA7
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      bytestring-mmap-0.2.2@bytes_838cPOnJ61dLulQP6D7UWj
                      case-insensitive-1.2.0.6@casei_05l5iiwk2FiGu4DeOqOIxC
                      comonad-4.2.7.2@comon_GX82l6LGAtU4pl76h7qRY6
                      configurator-0.3.0.0@confi_KJ5Lf5DeWVQFvN0NbO9dzR
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      contravariant-1.4@contr_5fhCu9dzdEdG1EXQYocttQ
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      directory-1.2.2.0@direc_0hFG6ZxK1nk4zsyOqbNHfm
                      directory-tree-0.12.0@direc_858T1RVMWwiLQQo0odiu52
                      distributive-0.5.0.2@distr_CdoGNL0xpvT8Yg8UOP51Po
                      dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui
                      either-4.4.1@eithe_21wZvADiaCZJGSh3HFMsE2
                      enumerator-0.4.20@enume_LyDnEQ6F69uDubH559Giin
                      exceptions-0.8.2.1@excep_6lgwjdgwblY7rzh5s6SLd8
                      extensible-exceptions-0.1.1.4@exten_FEBYnjUcabpEXD3JqlYlJc
                      filepath-1.4.0.0@filep_Ey7a1in9roBAE8bUFJ5R9m
                      free-4.12.4@free_K9MhAv0PwNjBU5Y43yg0qv ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      kan-extensions-4.2.3@kanex_FxwYeVFcp2I5Ahrww6IonA
                      lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX
                      mmorph-1.0.6@mmorp_42KUkOfzC6q3qCtAMiSHam
                      monad-control-1.0.0.5@monad_0V0Z5ArSaI68lPP0A0bpaP
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ
                      postgresql-libpq-0.9.1.1@postg_6f9D1As2FCe0fjZpXXvHvS
                      postgresql-simple-0.5.1.2@postg_9k9Uw6R9foNDbRYAVYjlMk
                      prelude-extras-0.4.0.3@prelu_1gQpKVfMHul71LsAFgGRhv
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      profunctors-5.2@profu_GJlbIQw4OdtCsUYHFjoJGV
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      raw-strings-qq-1.1@rawst_ID3MFclqMyK0MbTfvUn0Nf
                      reflection-2.1.2@refle_Is9SiIf9zRHG2wDNDxPaS9
                      resource-pool-catchio-0.2.1.0@resou_ID6yEN88zbvJjya9WklwSY
                      scientific-0.3.4.6@scien_5s26qRhE5w04kI4pP1Rtwm
                      semigroups-0.18.1@semig_EApcHsXPsrRKUkxxoKR3HO
                      semigroupoids-5.0.1@semig_FkGTCGQGMG5KEDQBdPQmqM
                      snap-0.14.0.7@snap_0lWB4JeqM0GGHi5xffSop5
                      snap-core-0.9.8.0@snapc_CMfJOiVQz5y9Hf3voaEWtD
                      snaplet-postgresql-simple-0.6.0.4@snapl_FYaolfHNtTcHRJGIzQgYbl
                      snap-server-0.9.5.1@snaps_90aCcMkQiIf81jaDMWhGhx
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      streaming-commons-0.1.15.2@strea_0Pv1kz8leJoAmtjyRTUWHG
                      tagged-0.8.3@tagge_5cptKNCoGdxJM6eqqNERxD template-haskell-2.10.0.0
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-base-0.4.4@trans_74WedXVmfaHHDJItmBRTVp
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
                      unix-compat-0.4.1.4@unixc_Km8uiabmElX5mrb8D4Fywe
                      unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j
                      uuid-types-1.0.3@uuidt_1jYi9RR4Gf08rGU1w6xxPr
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
                      zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu
                      zlib-bindings-0.1.1.5@zlibb_4TLHzVhj5c37rqLzkivtLr
                      zlib-enum-0.2.3.1@zlibe_0vMFCFBtq5X86FS1uoJqxg
orphans: MonadRandom-0.4.2.2@Monad_LbaXJr6Nhqd7LxAzlRvHiO:Control.Monad.Random
         aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Generic
         aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Instances
         attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.Text.Internal
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         base-orphans-0.5.3@baseo_4lH3gPOjJvdDgDLhAat0cc:Data.Orphans
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         configurator-0.3.0.0@confi_KJ5Lf5DeWVQFvN0NbO9dzR:Data.Configurator.Instances
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket.Types
         reflection-2.1.2@refle_Is9SiIf9zRHG2wDNDxPaS9:Data.Reflection
         snap-core-0.9.8.0@snapc_CMfJOiVQz5y9Hf3voaEWtD:Snap.Internal.Instances
         snap-core-0.9.8.0@snapc_CMfJOiVQz5y9Hf3voaEWtD:Snap.Iteratee
         snaplet-postgresql-simple-0.6.0.4@snapl_FYaolfHNtTcHRJGIzQgYbl:Snap.Snaplet.PostgresqlSimple
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjun_IXq6HBAgCNJ4fv6ViFbOEG:Data.Functor.Rep
                         attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.Internal.Types
                         base-4.8.2.0:Control.Applicative base-4.8.2.0:Data.Either
                         base-4.8.2.0:Data.Functor.Identity base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:Data.Void
                         base-4.8.2.0:GHC.Exts base-4.8.2.0:GHC.Generics
                         base-4.8.2.0:GHC.TypeLits
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Biff
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Clown
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Flip
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Join
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Joker
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Product
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Sum
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Tannen
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Wrapped
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui:Data.DList
                         either-4.4.1@eithe_21wZvADiaCZJGSh3HFMsE2:Control.Monad.Trans.Either
                         kan-extensions-4.2.3@kanex_FxwYeVFcp2I5Ahrww6IonA:Data.Functor.Yoneda
                         lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens.At
                         lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens.Internal.Indexed
                         lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens.Internal.Zoom
                         lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens.Reified
                         lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens.Tuple
                         lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens.Wrapped
                         monad-control-1.0.0.5@monad_0V0Z5ArSaI68lPP0A0bpaP:Control.Monad.Trans.Control
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         profunctors-5.2@profu_GJlbIQw4OdtCsUYHFjoJGV:Data.Profunctor.Rep
                         semigroups-0.18.1@semig_EApcHsXPsrRKUkxxoKR3HO:Data.List.NonEmpty
                         semigroups-0.18.1@semig_EApcHsXPsrRKUkxxoKR3HO:Data.Semigroup
                         tagged-0.8.3@tagge_5cptKNCoGdxJM6eqqNERxD:Data.Tagged
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashSet
                         uuid-types-1.0.3@uuidt_1jYi9RR4Gf08rGU1w6xxPr:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuidt_1jYi9RR4Gf08rGU1w6xxPr:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Storable
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
                         zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu:Codec.Compression.Zlib.Stream
import  -/  aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson 0ad4486e939f3e670242c3cec3c031bf
import  -/  aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Encode.ByteString 8518d883f1b3872324dcde6e60e3ed49
import  -/  aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Class f2f2ded551307c4c8a376ba36628360c
import  -/  aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Instances de843228e06930b2332d1934c97dae62
import  -/  aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Internal 10cb4888133b134ffafcc41bb2baa9d2
import  -/  base-4.8.2.0:Control.Applicative a8ebf5ad4932b411ad7725da68be9801
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString a7dd1816d7b9a73f13bb7af0c321dca4
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Internal dfa34e211eb5d18268ce7a397234e851
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  Application 86591734b5a18689f41d9722d8a67c57
  exports: 08ce433f06e5cf5960a336800fdc2965
  App eef5ab24db3d875187ee32183caac546
  App 14a49c348781e6a568cef0834dc05c2d
  pg 86a47d249b4258c08378b3329ddd6237
import  -/  postgresql-simple-0.5.1.2@postg_9k9Uw6R9foNDbRYAVYjlMk:Database.PostgreSQL.Simple.FromRow 90564293e7c5d921140584af726fa03a
import  -/  postgresql-simple-0.5.1.2@postg_9k9Uw6R9foNDbRYAVYjlMk:Database.PostgreSQL.Simple.Types 7cec5e657d24811b8b6d01a5fc906de4
import  -/  raw-strings-qq-1.1@rawst_ID3MFclqMyK0MbTfvUn0Nf:Text.RawString.QQ 3d58a6acfb7bbeeef8c980a600e1f5d3
import  -/  snap-0.14.0.7@snap_0lWB4JeqM0GGHi5xffSop5:Snap.Snaplet 47dce742aae81b62c5df8bcdd5d39bcd
import  -/  snap-0.14.0.7@snap_0lWB4JeqM0GGHi5xffSop5:Snap.Snaplet.Internal.Initializer 124fcb3d9a326dd526c494165ee4046b
import  -/  snap-0.14.0.7@snap_0lWB4JeqM0GGHi5xffSop5:Snap.Snaplet.Internal.Types dc70894eea7be3c8456318ec3832e4f6
import  -/  snap-core-0.9.8.0@snapc_CMfJOiVQz5y9Hf3voaEWtD:Snap.Core c61d6b39ffd77b1bc4ad1d73d59c1715
import  -/  snap-core-0.9.8.0@snapc_CMfJOiVQz5y9Hf3voaEWtD:Snap.Internal.Http.Types a3ab9ad6983e2dca484e2fa808f82cbd
import  -/  snap-core-0.9.8.0@snapc_CMfJOiVQz5y9Hf3voaEWtD:Snap.Internal.Types 9db419454da7f064712403aa04a23ca8
import  -/  snap-core-0.9.8.0@snapc_CMfJOiVQz5y9Hf3voaEWtD:Snap.Util.FileServe bae97a4df6728ec018ea673b1751e12f
import  -/  snaplet-postgresql-simple-0.6.0.4@snapl_FYaolfHNtTcHRJGIzQgYbl:Snap.Snaplet.PostgresqlSimple 3a282122ef0441cf73ffde93fc3d0ac5
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text 677c532e2dd56476a11a0a8a53880ce7
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Internal d9b6b9a9dd535595b612aea5738b7466
import  -/  transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.IO.Class 37487179a2f5eb2ea7922b911abcae56
706d1b0e06386791a4a27e9b7b2f4e48
  $fFromRowBareClue ::
    Database.PostgreSQL.Simple.FromRow.FromRow Site.BareClue
  DFunId[0]
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Site.$fFromRowBareClue_$cfromRow
                  `cast`
                (Sym (Database.PostgreSQL.Simple.FromRow.NTCo:FromRow[0]) <Site.BareClue>_N) -}
706d1b0e06386791a4a27e9b7b2f4e48
  $fFromRowBareClue1 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Conversion
         (Site.BareClue, Database.PostgreSQL.LibPQ.Column)
  {- Arity: 1,
     Unfolding: (Database.PostgreSQL.Simple.Internal.$fApplicativeRowParser3
                   @ GHC.Types.Int
                   @ Site.BareClue
                   Site.$fFromRowBareClue3
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Trans
                                  (<Database.PostgreSQL.LibPQ.Column>_R
                                   ->_R Trans
                                            (<Database.PostgreSQL.Simple.Internal.Connection>_R
                                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                                           <Database.PostgreSQL.Simple.Ok.Ok
                                                              (GHC.Types.Int -> Site.BareClue,
                                                               Database.PostgreSQL.LibPQ.Column)>_R))
                                            (Sym (Database.PostgreSQL.Simple.Internal.NTCo:Conversion[0]
                                                      <(GHC.Types.Int -> Site.BareClue,
                                                        Database.PostgreSQL.LibPQ.Column)>_R)))
                                  (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                            <Database.PostgreSQL.LibPQ.Column>_N
                                            <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                            <GHC.Types.Int -> Site.BareClue>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <GHC.Types.Int -> Site.BareClue>_N)))
                   Site.$fFromRowBareClue2
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Trans
                                  (<Database.PostgreSQL.LibPQ.Column>_R
                                   ->_R Trans
                                            (<Database.PostgreSQL.Simple.Internal.Connection>_R
                                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                                           <Database.PostgreSQL.Simple.Ok.Ok
                                                              (GHC.Types.Int,
                                                               Database.PostgreSQL.LibPQ.Column)>_R))
                                            (Sym (Database.PostgreSQL.Simple.Internal.NTCo:Conversion[0]
                                                      <(GHC.Types.Int,
                                                        Database.PostgreSQL.LibPQ.Column)>_R)))
                                  (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                            <Database.PostgreSQL.LibPQ.Column>_N
                                            <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                            <GHC.Types.Int>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <GHC.Types.Int>_N)))) -}
1f4b8a8d02213262a643874bb852aba1
  $fFromRowBareClue2 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Database.PostgreSQL.Simple.Ok.Ok
            (GHC.Types.Int, Database.PostgreSQL.LibPQ.Column) #)
  {- Arity: 4,
     Strictness: <S(LS),1*U(U,U(U,U))><S,1*U(U)><L,U(U,U,U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ w3 :: Database.PostgreSQL.Simple.Internal.Row
                   w4 :: Database.PostgreSQL.LibPQ.Column
                   w5 :: Database.PostgreSQL.Simple.Internal.Connection
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Database.PostgreSQL.Simple.Internal.Row ww1 ww2 ->
                 case ww2
                        `cast`
                      (Database.PostgreSQL.LibPQ.NTCo:Result[0]) of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case w4
                        `cast`
                      (Trans
                           (Database.PostgreSQL.LibPQ.NTCo:Column[0])
                           (Foreign.C.Types.NTCo:CInt[0])) of ww6 { GHC.Int.I32# ww7 ->
                 Database.PostgreSQL.Simple.FromRow.$wa
                   @ GHC.Types.Int
                   Database.PostgreSQL.Simple.FromField.$fFromFieldInt_$cfromField
                   ww1
                   ww4
                   ww5
                   ww7
                   w5
                   w6 } } }) -}
706d1b0e06386791a4a27e9b7b2f4e48
  $fFromRowBareClue3 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Database.PostgreSQL.Simple.Ok.Ok
            (GHC.Types.Int -> Site.BareClue,
             Database.PostgreSQL.LibPQ.Column) #)
  {- Arity: 4,
     Strictness: <S(LS),1*U(U,U(U,U))><S,1*U(U)><L,U(U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w3 :: Database.PostgreSQL.Simple.Internal.Row
                   w4 :: Database.PostgreSQL.LibPQ.Column
                   w5 :: Database.PostgreSQL.Simple.Internal.Connection
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Database.PostgreSQL.Simple.Internal.Row ww1 ww2 ->
                 case ww2
                        `cast`
                      (Database.PostgreSQL.LibPQ.NTCo:Result[0]) of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case w4
                        `cast`
                      (Trans
                           (Database.PostgreSQL.LibPQ.NTCo:Column[0])
                           (Foreign.C.Types.NTCo:CInt[0])) of ww6 { GHC.Int.I32# ww7 ->
                 Site.$wa ww1 ww4 ww5 ww7 w5 w6 } } }) -}
706d1b0e06386791a4a27e9b7b2f4e48
  $fFromRowBareClue_$cfromRow ::
    Database.PostgreSQL.Simple.Internal.RowParser Site.BareClue
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Site.$fFromRowBareClue1
                  `cast`
                (Trans
                     (<Database.PostgreSQL.Simple.Internal.Row>_R
                      ->_R Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                    <Database.PostgreSQL.LibPQ.Column>_N
                                    <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                    <Site.BareClue>_N))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Database.PostgreSQL.Simple.Internal.Row>_R
                                    <Control.Monad.Trans.State.Strict.StateT
                                       Database.PostgreSQL.LibPQ.Column
                                       Database.PostgreSQL.Simple.Internal.Conversion>_R
                                    <Site.BareClue>_N))
                          (Sym (Database.PostgreSQL.Simple.Internal.NTCo:RowParser[0]) <Site.BareClue>_N))) -}
b42a006173109e70ce9635939ffd0292
  $fFromRowRawClue ::
    Database.PostgreSQL.Simple.FromRow.FromRow Site.RawClue
  DFunId[0]
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Site.$fFromRowRawClue_$cfromRow
                  `cast`
                (Sym (Database.PostgreSQL.Simple.FromRow.NTCo:FromRow[0]) <Site.RawClue>_N) -}
b42a006173109e70ce9635939ffd0292
  $fFromRowRawClue1 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Conversion
         (Site.RawClue, Database.PostgreSQL.LibPQ.Column)
  {- Arity: 1,
     Unfolding: (Database.PostgreSQL.Simple.Internal.$fApplicativeRowParser3
                   @ GHC.Types.Int
                   @ Site.RawClue
                   Site.$fFromRowRawClue2
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                       <Database.PostgreSQL.LibPQ.Column>_N
                                       <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                       <GHC.Types.Int -> Site.RawClue>_N))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <GHC.Types.Int -> Site.RawClue>_N)))
                   Site.$fFromRowBareClue2
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Trans
                                  (<Database.PostgreSQL.LibPQ.Column>_R
                                   ->_R Trans
                                            (<Database.PostgreSQL.Simple.Internal.Connection>_R
                                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                                           <Database.PostgreSQL.Simple.Ok.Ok
                                                              (GHC.Types.Int,
                                                               Database.PostgreSQL.LibPQ.Column)>_R))
                                            (Sym (Database.PostgreSQL.Simple.Internal.NTCo:Conversion[0]
                                                      <(GHC.Types.Int,
                                                        Database.PostgreSQL.LibPQ.Column)>_R)))
                                  (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                            <Database.PostgreSQL.LibPQ.Column>_N
                                            <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                            <GHC.Types.Int>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <GHC.Types.Int>_N)))) -}
b42a006173109e70ce9635939ffd0292
  $fFromRowRawClue2 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Conversion
         (GHC.Types.Int -> Site.RawClue, Database.PostgreSQL.LibPQ.Column)
  {- Arity: 1,
     Unfolding: (Database.PostgreSQL.Simple.Internal.$fApplicativeRowParser3
                   @ GHC.Types.Int
                   @ (GHC.Types.Int -> Site.RawClue)
                   Site.$fFromRowRawClue3
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                       <Database.PostgreSQL.LibPQ.Column>_N
                                       <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                       <GHC.Types.Int -> GHC.Types.Int -> Site.RawClue>_N))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <GHC.Types.Int -> GHC.Types.Int -> Site.RawClue>_N)))
                   Site.$fFromRowBareClue2
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Trans
                                  (<Database.PostgreSQL.LibPQ.Column>_R
                                   ->_R Trans
                                            (<Database.PostgreSQL.Simple.Internal.Connection>_R
                                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                                           <Database.PostgreSQL.Simple.Ok.Ok
                                                              (GHC.Types.Int,
                                                               Database.PostgreSQL.LibPQ.Column)>_R))
                                            (Sym (Database.PostgreSQL.Simple.Internal.NTCo:Conversion[0]
                                                      <(GHC.Types.Int,
                                                        Database.PostgreSQL.LibPQ.Column)>_R)))
                                  (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                            <Database.PostgreSQL.LibPQ.Column>_N
                                            <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                            <GHC.Types.Int>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <GHC.Types.Int>_N)))) -}
b42a006173109e70ce9635939ffd0292
  $fFromRowRawClue3 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Conversion
         (GHC.Types.Int -> GHC.Types.Int -> Site.RawClue,
          Database.PostgreSQL.LibPQ.Column)
  {- Arity: 1,
     Unfolding: (Database.PostgreSQL.Simple.Internal.$fApplicativeRowParser3
                   @ Data.Text.Internal.Text
                   @ (GHC.Types.Int -> GHC.Types.Int -> Site.RawClue)
                   Site.$fFromRowRawClue5
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                       <Database.PostgreSQL.LibPQ.Column>_N
                                       <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                       <Data.Text.Internal.Text
                                        -> GHC.Types.Int -> GHC.Types.Int -> Site.RawClue>_N))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <Data.Text.Internal.Text
                                   -> GHC.Types.Int -> GHC.Types.Int -> Site.RawClue>_N)))
                   Site.$fFromRowRawClue4
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Trans
                                  (<Database.PostgreSQL.LibPQ.Column>_R
                                   ->_R Trans
                                            (<Database.PostgreSQL.Simple.Internal.Connection>_R
                                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                                           <Database.PostgreSQL.Simple.Ok.Ok
                                                              (Data.Text.Internal.Text,
                                                               Database.PostgreSQL.LibPQ.Column)>_R))
                                            (Sym (Database.PostgreSQL.Simple.Internal.NTCo:Conversion[0]
                                                      <(Data.Text.Internal.Text,
                                                        Database.PostgreSQL.LibPQ.Column)>_R)))
                                  (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                            <Database.PostgreSQL.LibPQ.Column>_N
                                            <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                            <Data.Text.Internal.Text>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <Data.Text.Internal.Text>_N)))) -}
bcead957fa908d49019c6bde49a594cd
  $fFromRowRawClue4 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Database.PostgreSQL.Simple.Ok.Ok
            (Data.Text.Internal.Text, Database.PostgreSQL.LibPQ.Column) #)
  {- Arity: 4,
     Strictness: <S(LS),1*U(U,U(U,U))><S,1*U(U)><L,U(U,U,U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ w3 :: Database.PostgreSQL.Simple.Internal.Row
                   w4 :: Database.PostgreSQL.LibPQ.Column
                   w5 :: Database.PostgreSQL.Simple.Internal.Connection
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Database.PostgreSQL.Simple.Internal.Row ww1 ww2 ->
                 case ww2
                        `cast`
                      (Database.PostgreSQL.LibPQ.NTCo:Result[0]) of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case w4
                        `cast`
                      (Trans
                           (Database.PostgreSQL.LibPQ.NTCo:Column[0])
                           (Foreign.C.Types.NTCo:CInt[0])) of ww6 { GHC.Int.I32# ww7 ->
                 Database.PostgreSQL.Simple.FromRow.$wa
                   @ Data.Text.Internal.Text
                   Database.PostgreSQL.Simple.FromField.$fFromFieldText_$cfromField1
                   ww1
                   ww4
                   ww5
                   ww7
                   w5
                   w6 } } }) -}
b42a006173109e70ce9635939ffd0292
  $fFromRowRawClue5 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Conversion
         (Data.Text.Internal.Text
          -> GHC.Types.Int -> GHC.Types.Int -> Site.RawClue,
          Database.PostgreSQL.LibPQ.Column)
  {- Arity: 1,
     Unfolding: (Database.PostgreSQL.Simple.Internal.$fApplicativeRowParser3
                   @ Data.Text.Internal.Text
                   @ (Data.Text.Internal.Text
                      -> GHC.Types.Int -> GHC.Types.Int -> Site.RawClue)
                   Site.$fFromRowRawClue6
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                       <Database.PostgreSQL.LibPQ.Column>_N
                                       <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                       <Data.Text.Internal.Text
                                        -> Data.Text.Internal.Text
                                        -> GHC.Types.Int
                                        -> GHC.Types.Int
                                        -> Site.RawClue>_N))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <Data.Text.Internal.Text
                                   -> Data.Text.Internal.Text
                                   -> GHC.Types.Int
                                   -> GHC.Types.Int
                                   -> Site.RawClue>_N)))
                   Site.$fFromRowRawClue4
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Trans
                                  (<Database.PostgreSQL.LibPQ.Column>_R
                                   ->_R Trans
                                            (<Database.PostgreSQL.Simple.Internal.Connection>_R
                                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                                           <Database.PostgreSQL.Simple.Ok.Ok
                                                              (Data.Text.Internal.Text,
                                                               Database.PostgreSQL.LibPQ.Column)>_R))
                                            (Sym (Database.PostgreSQL.Simple.Internal.NTCo:Conversion[0]
                                                      <(Data.Text.Internal.Text,
                                                        Database.PostgreSQL.LibPQ.Column)>_R)))
                                  (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                            <Database.PostgreSQL.LibPQ.Column>_N
                                            <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                            <Data.Text.Internal.Text>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <Data.Text.Internal.Text>_N)))) -}
b42a006173109e70ce9635939ffd0292
  $fFromRowRawClue6 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Conversion
         (Data.Text.Internal.Text
          -> Data.Text.Internal.Text
          -> GHC.Types.Int
          -> GHC.Types.Int
          -> Site.RawClue,
          Database.PostgreSQL.LibPQ.Column)
  {- Arity: 1,
     Unfolding: (Database.PostgreSQL.Simple.Internal.$fApplicativeRowParser3
                   @ GHC.Types.Int
                   @ (Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> GHC.Types.Int
                      -> GHC.Types.Int
                      -> Site.RawClue)
                   Site.$fFromRowRawClue7
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                       <Database.PostgreSQL.LibPQ.Column>_N
                                       <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                       <GHC.Types.Int
                                        -> Data.Text.Internal.Text
                                        -> Data.Text.Internal.Text
                                        -> GHC.Types.Int
                                        -> GHC.Types.Int
                                        -> Site.RawClue>_N))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <GHC.Types.Int
                                   -> Data.Text.Internal.Text
                                   -> Data.Text.Internal.Text
                                   -> GHC.Types.Int
                                   -> GHC.Types.Int
                                   -> Site.RawClue>_N)))
                   Site.$fFromRowBareClue2
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Trans
                                  (<Database.PostgreSQL.LibPQ.Column>_R
                                   ->_R Trans
                                            (<Database.PostgreSQL.Simple.Internal.Connection>_R
                                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                                           <Database.PostgreSQL.Simple.Ok.Ok
                                                              (GHC.Types.Int,
                                                               Database.PostgreSQL.LibPQ.Column)>_R))
                                            (Sym (Database.PostgreSQL.Simple.Internal.NTCo:Conversion[0]
                                                      <(GHC.Types.Int,
                                                        Database.PostgreSQL.LibPQ.Column)>_R)))
                                  (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                            <Database.PostgreSQL.LibPQ.Column>_N
                                            <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                            <GHC.Types.Int>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <GHC.Types.Int>_N)))) -}
b42a006173109e70ce9635939ffd0292
  $fFromRowRawClue7 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Conversion
         (GHC.Types.Int
          -> Data.Text.Internal.Text
          -> Data.Text.Internal.Text
          -> GHC.Types.Int
          -> GHC.Types.Int
          -> Site.RawClue,
          Database.PostgreSQL.LibPQ.Column)
  {- Arity: 1,
     Unfolding: (Database.PostgreSQL.Simple.Internal.$fApplicativeRowParser3
                   @ GHC.Types.Int
                   @ (GHC.Types.Int
                      -> Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> GHC.Types.Int
                      -> GHC.Types.Int
                      -> Site.RawClue)
                   Site.$fFromRowRawClue8
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Trans
                                  (<Database.PostgreSQL.LibPQ.Column>_R
                                   ->_R Trans
                                            (<Database.PostgreSQL.Simple.Internal.Connection>_R
                                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                                           <Database.PostgreSQL.Simple.Ok.Ok
                                                              (GHC.Types.Int
                                                               -> GHC.Types.Int
                                                               -> Data.Text.Internal.Text
                                                               -> Data.Text.Internal.Text
                                                               -> GHC.Types.Int
                                                               -> GHC.Types.Int
                                                               -> Site.RawClue,
                                                               Database.PostgreSQL.LibPQ.Column)>_R))
                                            (Sym (Database.PostgreSQL.Simple.Internal.NTCo:Conversion[0]
                                                      <(GHC.Types.Int
                                                        -> GHC.Types.Int
                                                        -> Data.Text.Internal.Text
                                                        -> Data.Text.Internal.Text
                                                        -> GHC.Types.Int
                                                        -> GHC.Types.Int
                                                        -> Site.RawClue,
                                                        Database.PostgreSQL.LibPQ.Column)>_R)))
                                  (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                            <Database.PostgreSQL.LibPQ.Column>_N
                                            <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                            <GHC.Types.Int
                                             -> GHC.Types.Int
                                             -> Data.Text.Internal.Text
                                             -> Data.Text.Internal.Text
                                             -> GHC.Types.Int
                                             -> GHC.Types.Int
                                             -> Site.RawClue>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <GHC.Types.Int
                                   -> GHC.Types.Int
                                   -> Data.Text.Internal.Text
                                   -> Data.Text.Internal.Text
                                   -> GHC.Types.Int
                                   -> GHC.Types.Int
                                   -> Site.RawClue>_N)))
                   Site.$fFromRowBareClue2
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Trans
                                  (<Database.PostgreSQL.LibPQ.Column>_R
                                   ->_R Trans
                                            (<Database.PostgreSQL.Simple.Internal.Connection>_R
                                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                                           <Database.PostgreSQL.Simple.Ok.Ok
                                                              (GHC.Types.Int,
                                                               Database.PostgreSQL.LibPQ.Column)>_R))
                                            (Sym (Database.PostgreSQL.Simple.Internal.NTCo:Conversion[0]
                                                      <(GHC.Types.Int,
                                                        Database.PostgreSQL.LibPQ.Column)>_R)))
                                  (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                            <Database.PostgreSQL.LibPQ.Column>_N
                                            <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                            <GHC.Types.Int>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <GHC.Types.Int>_N)))) -}
b42a006173109e70ce9635939ffd0292
  $fFromRowRawClue8 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Database.PostgreSQL.Simple.Ok.Ok
            (GHC.Types.Int
             -> GHC.Types.Int
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> GHC.Types.Int
             -> GHC.Types.Int
             -> Site.RawClue,
             Database.PostgreSQL.LibPQ.Column) #)
  {- Arity: 4,
     Strictness: <S(LS),1*U(U,U(U,U))><S,1*U(U)><L,U(U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w3 :: Database.PostgreSQL.Simple.Internal.Row
                   w4 :: Database.PostgreSQL.LibPQ.Column
                   w5 :: Database.PostgreSQL.Simple.Internal.Connection
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Database.PostgreSQL.Simple.Internal.Row ww1 ww2 ->
                 case ww2
                        `cast`
                      (Database.PostgreSQL.LibPQ.NTCo:Result[0]) of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case w4
                        `cast`
                      (Trans
                           (Database.PostgreSQL.LibPQ.NTCo:Column[0])
                           (Foreign.C.Types.NTCo:CInt[0])) of ww6 { GHC.Int.I32# ww7 ->
                 Site.$wa1 ww1 ww4 ww5 ww7 w5 w6 } } }) -}
b42a006173109e70ce9635939ffd0292
  $fFromRowRawClue_$cfromRow ::
    Database.PostgreSQL.Simple.Internal.RowParser Site.RawClue
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Site.$fFromRowRawClue1
                  `cast`
                (Trans
                     (<Database.PostgreSQL.Simple.Internal.Row>_R
                      ->_R Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                    <Database.PostgreSQL.LibPQ.Column>_N
                                    <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                    <Site.RawClue>_N))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Database.PostgreSQL.Simple.Internal.Row>_R
                                    <Control.Monad.Trans.State.Strict.StateT
                                       Database.PostgreSQL.LibPQ.Column
                                       Database.PostgreSQL.Simple.Internal.Conversion>_R
                                    <Site.RawClue>_N))
                          (Sym (Database.PostgreSQL.Simple.Internal.NTCo:RowParser[0]) <Site.RawClue>_N))) -}
1eb10af2515019bf36f20e14804fab42
  $fFromRowRawQuestion ::
    Database.PostgreSQL.Simple.FromRow.FromRow Site.RawQuestion
  DFunId[0]
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Site.$fFromRowRawQuestion_$cfromRow
                  `cast`
                (Sym (Database.PostgreSQL.Simple.FromRow.NTCo:FromRow[0]) <Site.RawQuestion>_N) -}
1eb10af2515019bf36f20e14804fab42
  $fFromRowRawQuestion1 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Conversion
         (Site.RawQuestion, Database.PostgreSQL.LibPQ.Column)
  {- Arity: 1,
     Unfolding: (Database.PostgreSQL.Simple.Internal.$fApplicativeRowParser3
                   @ Data.Text.Internal.Text
                   @ Site.RawQuestion
                   Site.$fFromRowRawQuestion2
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                       <Database.PostgreSQL.LibPQ.Column>_N
                                       <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                       <Data.Text.Internal.Text -> Site.RawQuestion>_N))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <Data.Text.Internal.Text -> Site.RawQuestion>_N)))
                   Site.$fFromRowRawClue4
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Trans
                                  (<Database.PostgreSQL.LibPQ.Column>_R
                                   ->_R Trans
                                            (<Database.PostgreSQL.Simple.Internal.Connection>_R
                                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                                           <Database.PostgreSQL.Simple.Ok.Ok
                                                              (Data.Text.Internal.Text,
                                                               Database.PostgreSQL.LibPQ.Column)>_R))
                                            (Sym (Database.PostgreSQL.Simple.Internal.NTCo:Conversion[0]
                                                      <(Data.Text.Internal.Text,
                                                        Database.PostgreSQL.LibPQ.Column)>_R)))
                                  (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                            <Database.PostgreSQL.LibPQ.Column>_N
                                            <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                            <Data.Text.Internal.Text>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <Data.Text.Internal.Text>_N)))) -}
1eb10af2515019bf36f20e14804fab42
  $fFromRowRawQuestion2 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Conversion
         (Data.Text.Internal.Text -> Site.RawQuestion,
          Database.PostgreSQL.LibPQ.Column)
  {- Arity: 1,
     Unfolding: (Database.PostgreSQL.Simple.Internal.$fApplicativeRowParser3
                   @ Data.Text.Internal.Text
                   @ (Data.Text.Internal.Text -> Site.RawQuestion)
                   Site.$fFromRowRawQuestion3
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                       <Database.PostgreSQL.LibPQ.Column>_N
                                       <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                       <Data.Text.Internal.Text
                                        -> Data.Text.Internal.Text -> Site.RawQuestion>_N))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <Data.Text.Internal.Text
                                   -> Data.Text.Internal.Text -> Site.RawQuestion>_N)))
                   Site.$fFromRowRawClue4
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Trans
                                  (<Database.PostgreSQL.LibPQ.Column>_R
                                   ->_R Trans
                                            (<Database.PostgreSQL.Simple.Internal.Connection>_R
                                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                                           <Database.PostgreSQL.Simple.Ok.Ok
                                                              (Data.Text.Internal.Text,
                                                               Database.PostgreSQL.LibPQ.Column)>_R))
                                            (Sym (Database.PostgreSQL.Simple.Internal.NTCo:Conversion[0]
                                                      <(Data.Text.Internal.Text,
                                                        Database.PostgreSQL.LibPQ.Column)>_R)))
                                  (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                            <Database.PostgreSQL.LibPQ.Column>_N
                                            <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                            <Data.Text.Internal.Text>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <Data.Text.Internal.Text>_N)))) -}
1eb10af2515019bf36f20e14804fab42
  $fFromRowRawQuestion3 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Conversion
         (Data.Text.Internal.Text
          -> Data.Text.Internal.Text -> Site.RawQuestion,
          Database.PostgreSQL.LibPQ.Column)
  {- Arity: 1,
     Unfolding: (Database.PostgreSQL.Simple.Internal.$fApplicativeRowParser3
                   @ GHC.Types.Int
                   @ (Data.Text.Internal.Text
                      -> Data.Text.Internal.Text -> Site.RawQuestion)
                   Site.$fFromRowRawQuestion4
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                       <Database.PostgreSQL.LibPQ.Column>_N
                                       <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                       <GHC.Types.Int
                                        -> Data.Text.Internal.Text
                                        -> Data.Text.Internal.Text
                                        -> Site.RawQuestion>_N))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <GHC.Types.Int
                                   -> Data.Text.Internal.Text
                                   -> Data.Text.Internal.Text
                                   -> Site.RawQuestion>_N)))
                   Site.$fFromRowBareClue2
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Trans
                                  (<Database.PostgreSQL.LibPQ.Column>_R
                                   ->_R Trans
                                            (<Database.PostgreSQL.Simple.Internal.Connection>_R
                                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                                           <Database.PostgreSQL.Simple.Ok.Ok
                                                              (GHC.Types.Int,
                                                               Database.PostgreSQL.LibPQ.Column)>_R))
                                            (Sym (Database.PostgreSQL.Simple.Internal.NTCo:Conversion[0]
                                                      <(GHC.Types.Int,
                                                        Database.PostgreSQL.LibPQ.Column)>_R)))
                                  (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                            <Database.PostgreSQL.LibPQ.Column>_N
                                            <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                            <GHC.Types.Int>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <GHC.Types.Int>_N)))) -}
1eb10af2515019bf36f20e14804fab42
  $fFromRowRawQuestion4 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Conversion
         (GHC.Types.Int
          -> Data.Text.Internal.Text
          -> Data.Text.Internal.Text
          -> Site.RawQuestion,
          Database.PostgreSQL.LibPQ.Column)
  {- Arity: 1,
     Unfolding: (Database.PostgreSQL.Simple.Internal.$fApplicativeRowParser3
                   @ GHC.Types.Int
                   @ (GHC.Types.Int
                      -> Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Site.RawQuestion)
                   Site.$fFromRowRawQuestion5
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                       <Database.PostgreSQL.LibPQ.Column>_N
                                       <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                       <GHC.Types.Int
                                        -> GHC.Types.Int
                                        -> Data.Text.Internal.Text
                                        -> Data.Text.Internal.Text
                                        -> Site.RawQuestion>_N))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <GHC.Types.Int
                                   -> GHC.Types.Int
                                   -> Data.Text.Internal.Text
                                   -> Data.Text.Internal.Text
                                   -> Site.RawQuestion>_N)))
                   Site.$fFromRowBareClue2
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Trans
                                  (<Database.PostgreSQL.LibPQ.Column>_R
                                   ->_R Trans
                                            (<Database.PostgreSQL.Simple.Internal.Connection>_R
                                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                                           <Database.PostgreSQL.Simple.Ok.Ok
                                                              (GHC.Types.Int,
                                                               Database.PostgreSQL.LibPQ.Column)>_R))
                                            (Sym (Database.PostgreSQL.Simple.Internal.NTCo:Conversion[0]
                                                      <(GHC.Types.Int,
                                                        Database.PostgreSQL.LibPQ.Column)>_R)))
                                  (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                            <Database.PostgreSQL.LibPQ.Column>_N
                                            <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                            <GHC.Types.Int>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <GHC.Types.Int>_N)))) -}
1eb10af2515019bf36f20e14804fab42
  $fFromRowRawQuestion5 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Conversion
         (GHC.Types.Int
          -> GHC.Types.Int
          -> Data.Text.Internal.Text
          -> Data.Text.Internal.Text
          -> Site.RawQuestion,
          Database.PostgreSQL.LibPQ.Column)
  {- Arity: 1,
     Unfolding: (Database.PostgreSQL.Simple.Internal.$fApplicativeRowParser3
                   @ Data.Text.Internal.Text
                   @ (GHC.Types.Int
                      -> GHC.Types.Int
                      -> Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Site.RawQuestion)
                   Site.$fFromRowRawQuestion6
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Trans
                                  (<Database.PostgreSQL.LibPQ.Column>_R
                                   ->_R Trans
                                            (<Database.PostgreSQL.Simple.Internal.Connection>_R
                                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                                           <Database.PostgreSQL.Simple.Ok.Ok
                                                              (Data.Text.Internal.Text
                                                               -> GHC.Types.Int
                                                               -> GHC.Types.Int
                                                               -> Data.Text.Internal.Text
                                                               -> Data.Text.Internal.Text
                                                               -> Site.RawQuestion,
                                                               Database.PostgreSQL.LibPQ.Column)>_R))
                                            (Sym (Database.PostgreSQL.Simple.Internal.NTCo:Conversion[0]
                                                      <(Data.Text.Internal.Text
                                                        -> GHC.Types.Int
                                                        -> GHC.Types.Int
                                                        -> Data.Text.Internal.Text
                                                        -> Data.Text.Internal.Text
                                                        -> Site.RawQuestion,
                                                        Database.PostgreSQL.LibPQ.Column)>_R)))
                                  (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                            <Database.PostgreSQL.LibPQ.Column>_N
                                            <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                            <Data.Text.Internal.Text
                                             -> GHC.Types.Int
                                             -> GHC.Types.Int
                                             -> Data.Text.Internal.Text
                                             -> Data.Text.Internal.Text
                                             -> Site.RawQuestion>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <Data.Text.Internal.Text
                                   -> GHC.Types.Int
                                   -> GHC.Types.Int
                                   -> Data.Text.Internal.Text
                                   -> Data.Text.Internal.Text
                                   -> Site.RawQuestion>_N)))
                   Site.$fFromRowRawClue4
                     `cast`
                   (Trans
                        (<Database.PostgreSQL.Simple.Internal.Row>_R
                         ->_R Trans
                                  (<Database.PostgreSQL.LibPQ.Column>_R
                                   ->_R Trans
                                            (<Database.PostgreSQL.Simple.Internal.Connection>_R
                                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                                           <Database.PostgreSQL.Simple.Ok.Ok
                                                              (Data.Text.Internal.Text,
                                                               Database.PostgreSQL.LibPQ.Column)>_R))
                                            (Sym (Database.PostgreSQL.Simple.Internal.NTCo:Conversion[0]
                                                      <(Data.Text.Internal.Text,
                                                        Database.PostgreSQL.LibPQ.Column)>_R)))
                                  (Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                            <Database.PostgreSQL.LibPQ.Column>_N
                                            <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                            <Data.Text.Internal.Text>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Database.PostgreSQL.Simple.Internal.Row>_R
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Database.PostgreSQL.LibPQ.Column
                                     Database.PostgreSQL.Simple.Internal.Conversion>_R
                                  <Data.Text.Internal.Text>_N)))) -}
1eb10af2515019bf36f20e14804fab42
  $fFromRowRawQuestion6 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Database.PostgreSQL.Simple.Ok.Ok
            (Data.Text.Internal.Text
             -> GHC.Types.Int
             -> GHC.Types.Int
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Site.RawQuestion,
             Database.PostgreSQL.LibPQ.Column) #)
  {- Arity: 4,
     Strictness: <S(LS),1*U(U,U(U,U))><S,1*U(U)><L,U(U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w3 :: Database.PostgreSQL.Simple.Internal.Row
                   w4 :: Database.PostgreSQL.LibPQ.Column
                   w5 :: Database.PostgreSQL.Simple.Internal.Connection
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Database.PostgreSQL.Simple.Internal.Row ww1 ww2 ->
                 case ww2
                        `cast`
                      (Database.PostgreSQL.LibPQ.NTCo:Result[0]) of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case w4
                        `cast`
                      (Trans
                           (Database.PostgreSQL.LibPQ.NTCo:Column[0])
                           (Foreign.C.Types.NTCo:CInt[0])) of ww6 { GHC.Int.I32# ww7 ->
                 Site.$wa2 ww1 ww4 ww5 ww7 w5 w6 } } }) -}
1eb10af2515019bf36f20e14804fab42
  $fFromRowRawQuestion_$cfromRow ::
    Database.PostgreSQL.Simple.Internal.RowParser Site.RawQuestion
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Site.$fFromRowRawQuestion1
                  `cast`
                (Trans
                     (<Database.PostgreSQL.Simple.Internal.Row>_R
                      ->_R Sym (Control.Monad.Trans.State.Strict.NTCo:StateT[0]
                                    <Database.PostgreSQL.LibPQ.Column>_N
                                    <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                    <Site.RawQuestion>_N))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Database.PostgreSQL.Simple.Internal.Row>_R
                                    <Control.Monad.Trans.State.Strict.StateT
                                       Database.PostgreSQL.LibPQ.Column
                                       Database.PostgreSQL.Simple.Internal.Conversion>_R
                                    <Site.RawQuestion>_N))
                          (Sym (Database.PostgreSQL.Simple.Internal.NTCo:RowParser[0]) <Site.RawQuestion>_N))) -}
de079c22233c35a43a27795bdf453396
  $fShowClue :: GHC.Show.Show Site.Clue
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Site.Clue
                  Site.$fShowClue_$cshowsPrec
                  Site.$fShowClue_$cshow
                  Site.$fShowClue_$cshowList -}
de079c22233c35a43a27795bdf453396
  $fShowClue1 :: Site.Clue -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w3 :: Site.Clue w4 :: GHC.Base.String ->
                 case w3 of ww { Site.Clue ww1 ww2 ww3 ww4 ww5 ->
                 Site.$w$cshowsPrec 0 ww1 ww2 ww3 ww4 ww5 w4 }) -}
8240d83abc1a0862afdb8048e3caad39
  $fShowClue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
5447d1377a704846ab32a4ab5adced32
  $fShowClue3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "answer = "#) -}
56598f6dd2abf90741261072795f4470
  $fShowClue4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "content = "#) -}
141082d717782f1c5cd2926adb8212b3
  $fShowClue5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "packet = "#) -}
b1e161b477b727b26f08c9b96b226bcc
  $fShowClue6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "year = "#) -}
178d2da92d92488993fb44d5cf90ce3c
  $fShowClue7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
8b1a5e31b932f2bf259761c52a0f6583
  $fShowClue8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tournament = "#) -}
207dacdfbb94e80097ed1650b445b297
  $fShowClue9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Clue {"#) -}
de079c22233c35a43a27795bdf453396
  $fShowClue_$cshow :: Site.Clue -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U,U,U),1*U(U),1*U(U),1*U(U,U,U),1*U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Site.Clue ->
                 Site.$fShowClue_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
de079c22233c35a43a27795bdf453396
  $fShowClue_$cshowList :: [Site.Clue] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Site.Clue Site.$fShowClue1) -}
de079c22233c35a43a27795bdf453396
  $fShowClue_$cshowsPrec ::
    GHC.Types.Int -> Site.Clue -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,1*U(U)><S,1*U(1*U(U,U,U),1*U(U),1*U(U),1*U(U,U,U),1*U(U,U,U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w3 :: GHC.Types.Int w4 :: Site.Clue w5 :: GHC.Base.String ->
                 case w3 of ww { GHC.Types.I# ww1 ->
                 case w4 of ww2 { Site.Clue ww3 ww4 ww5 ww6 ww7 ->
                 Site.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 w5 } }) -}
b7008fa1f04454b2de3453c8881f882d
  $fShowQuestion :: GHC.Show.Show Site.Question
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Site.Question
                  Site.$fShowQuestion_$cshowsPrec
                  Site.$fShowQuestion_$cshow
                  Site.$fShowQuestion_$cshowList -}
b7008fa1f04454b2de3453c8881f882d
  $fShowQuestion1 :: Site.Question -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w3 :: Site.Question w4 :: GHC.Base.String ->
                 case w3 of ww { Site.Question ww1 ww2 ww3 ww4 ww5 ->
                 Site.$w$cshowsPrec1 0 ww1 ww2 ww3 ww4 ww5 w4 }) -}
b7008fa1f04454b2de3453c8881f882d
  $fShowQuestion_$cshow :: Site.Question -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U,U,U),1*U(U),1*U(U),1*U,1*U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Site.Question ->
                 Site.$fShowQuestion_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b7008fa1f04454b2de3453c8881f882d
  $fShowQuestion_$cshowList :: [Site.Question] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Site.Question
                   Site.$fShowQuestion1) -}
b7008fa1f04454b2de3453c8881f882d
  $fShowQuestion_$cshowsPrec ::
    GHC.Types.Int -> Site.Question -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,1*U(U)><S,1*U(1*U(U,U,U),1*U(U),1*U(U),1*U,1*U(U,U,U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w3 :: GHC.Types.Int w4 :: Site.Question w5 :: GHC.Base.String ->
                 case w3 of ww { GHC.Types.I# ww1 ->
                 case w4 of ww2 { Site.Question ww3 ww4 ww5 ww6 ww7 ->
                 Site.$w$cshowsPrec1 ww1 ww3 ww4 ww5 ww6 ww7 w5 } }) -}
de079c22233c35a43a27795bdf453396
  $fToJSONClue :: Data.Aeson.Types.Class.ToJSON Site.Clue
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(1*U(U,U,U),1*U(U),1*U(U),1*U(U,U,U),1*U(U,U,U))>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Site.$fToJSONClue_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <Site.Clue>_N)) -}
b764140ce322cd3eb69ffdbad22d8531
  $fToJSONClue1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "answer"#) -}
5af8dc1958f926829a08a0e03ce2f4ed
  $fToJSONClue2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "content"#) -}
42d09d29ad8f407ac4b4a3c60d8c104e
  $fToJSONClue3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "packet"#) -}
d35a163560c2b34c482a187252c52f2f
  $fToJSONClue4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "year"#) -}
fd629e7fc8e5ae979c71a6cd82776dbb
  $fToJSONClue5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "tournament"#) -}
de079c22233c35a43a27795bdf453396
  $fToJSONClue_$ctoJSON ::
    Site.Clue -> Data.Aeson.Types.Internal.Value
  {- Arity: 1,
     Strictness: <L,U(1*U(U,U,U),1*U(U),1*U(U),1*U(U,U,U),1*U(U,U,U))>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w3 :: Site.Clue ->
                 case Site.$w$ctoJSON w3 of ww { (##) ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
b7008fa1f04454b2de3453c8881f882d
  $fToJSONQuestion :: Data.Aeson.Types.Class.ToJSON Site.Question
  DFunId[0]
  {- Arity: 1,
     Strictness: <L,U(1*U(U,U,U),1*U(U),1*U(U),1*U,1*U(U,U,U))>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Site.$fToJSONQuestion_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <Site.Question>_N)) -}
06c9ebbda19ccb685e2f9a324db9cb0d
  $fToJSONQuestion1 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0) -}
14f0a2b4f438e4418e3780bc2727ca22
  $fToJSONQuestion2 ::
    GHC.Types.SPEC
    -> (Data.Vector.Generic.Base.Mutable
          Data.Vector.Vector
          (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
          Data.Aeson.Types.Internal.Value,
        GHC.Types.Int)
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s,
          (Data.Vector.Generic.Base.Mutable
             Data.Vector.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
             Data.Aeson.Types.Internal.Value,
           GHC.Types.Int) #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U(U,U,U),U(U))><S,1*U><L,U> -}
b7008fa1f04454b2de3453c8881f882d
  $fToJSONQuestion_$ctoJSON ::
    Site.Question -> Data.Aeson.Types.Internal.Value
  {- Arity: 1,
     Strictness: <L,U(1*U(U,U,U),1*U(U),1*U(U),1*U,1*U(U,U,U))>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w3 :: Site.Question ->
                 case Site.$w$ctoJSON1 w3 of ww { (##) ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
2114d2fb8b64c0719bacaa95be06804a
  $s$fAlternativeHandler ::
    GHC.Base.Alternative
      (Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Snap.Snaplet.Internal.Types.Handler
                       Application.App Application.App)
                  Site.$s$fAlternativeHandler1
                  (Snap.Snaplet.Internal.Types.$fAlternativeHandler_$cempty
                     @ Application.App
                     @ Application.App
                     Site.$s$fAlternativeHandler1)
                  (Snap.Snaplet.Internal.Types.$fAlternativeHandler_$c<|>
                     @ Application.App
                     @ Application.App
                     Site.$s$fAlternativeHandler1)
                  (Snap.Snaplet.Internal.Types.$fAlternativeHandler_$csome
                     @ Application.App
                     @ Application.App
                     Site.$s$fAlternativeHandler1)
                  (Snap.Snaplet.Internal.Types.$fAlternativeHandler_$cmany
                     @ Application.App
                     @ Application.App
                     Site.$s$fAlternativeHandler1) -}
bdeccdf2a0634b6bed44183b3291f0be
  $s$fAlternativeHandler1 ::
    GHC.Base.Applicative
      (Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Site.$s$fAlternativeHandler_$s$fApplicativeHandler -}
6bfc67eec4ec00ccbfe2232b7c014962
  $s$fAlternativeHandler_$s$fApplicativeHandler ::
    GHC.Base.Applicative
      (Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Snap.Snaplet.Internal.Types.Handler
                       Application.App Application.App)
                  (Snap.Snaplet.Internal.Types.$fFunctorHandler
                     @ Application.App
                     @ Application.App)
                  (Snap.Snaplet.Internal.Types.$fApplicativeHandler_$cpure
                     @ Application.App
                     @ Application.App
                     (Snap.Snaplet.Internal.Types.$fFunctorHandler
                        @ Application.App
                        @ Application.App))
                  (Snap.Snaplet.Internal.Types.$fApplicativeHandler_$c<*>
                     @ Application.App
                     @ Application.App
                     (Snap.Snaplet.Internal.Types.$fFunctorHandler
                        @ Application.App
                        @ Application.App))
                  (Snap.Snaplet.Internal.Types.$fApplicativeHandler_$c*>
                     @ Application.App
                     @ Application.App
                     (Snap.Snaplet.Internal.Types.$fFunctorHandler
                        @ Application.App
                        @ Application.App))
                  (Snap.Snaplet.Internal.Types.$fApplicativeHandler_$c<*
                     @ Application.App
                     @ Application.App
                     (Snap.Snaplet.Internal.Types.$fFunctorHandler
                        @ Application.App
                        @ Application.App)) -}
05db43e979282d546749420003113f15
  $s$fHasPostgresHandler ::
    Snap.Snaplet.PostgresqlSimple.Internal.HasPostgres
      (Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Snap.Snaplet.Internal.Types.Handler
                       Application.App Application.App)
                  Site.$s$fHasPostgresHandler1
                  (Application.$fHasPostgresHandler_$cgetPostgresState
                     @ Application.App
                     Site.$s$fHasPostgresHandler1)
                  (Application.$fHasPostgresHandler_$csetLocalPostgresState
                     @ Application.App
                     Site.$s$fHasPostgresHandler1) -}
af22a9ddee7bbe4eff5b2edef44f1bf3
  $s$fHasPostgresHandler1 ::
    Control.Monad.CatchIO.MonadCatchIO
      (Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Site.$s$fHasPostgresHandler_$s$fMonadCatchIOHandler -}
7377ffd2660dafdc7a2931d95921131a
  $s$fHasPostgresHandler2 ::
    Control.Monad.IO.Class.MonadIO
      (Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Site.$s$fHasPostgresHandler_$s$fMonadIOHandler -}
64f3df40c1bcb9343504bcc58ff804ed
  $s$fHasPostgresHandler3 ::
    GHC.Base.Monad
      (Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Site.$s$fHasPostgresHandler_$s$fMonadHandler -}
00ab159c32a2cd1d0e55d6b73069dd4e
  $s$fHasPostgresHandler_$s$fMonadCatchIOHandler ::
    Control.Monad.CatchIO.MonadCatchIO
      (Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Snap.Snaplet.Internal.Types.Handler
                       Application.App Application.App)
                  Site.$s$fHasPostgresHandler2
                  (Snap.Snaplet.Internal.Types.$fMonadCatchIOHandler_$ccatch
                     @ Application.App
                     @ Application.App
                     Site.$s$fHasPostgresHandler2)
                  (Snap.Snaplet.Internal.Types.$fMonadCatchIOHandler_$cblock
                     @ Application.App
                     @ Application.App
                     Site.$s$fHasPostgresHandler2)
                  (Snap.Snaplet.Internal.Types.$fMonadCatchIOHandler_$cunblock
                     @ Application.App
                     @ Application.App
                     Site.$s$fHasPostgresHandler2) -}
e6a97e49ab310fe2540a70b839fa8487
  $s$fHasPostgresHandler_$s$fMonadHandler ::
    GHC.Base.Monad
      (Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Snap.Snaplet.Internal.Types.Handler
                       Application.App Application.App)
                  Site.$s$fAlternativeHandler1
                  (Snap.Snaplet.Internal.Types.$fMonadHandler_$c>>=
                     @ Application.App
                     @ Application.App
                     Site.$s$fAlternativeHandler1)
                  (Snap.Snaplet.Internal.Types.$fMonadHandler_$c>>
                     @ Application.App
                     @ Application.App
                     Site.$s$fAlternativeHandler1)
                  (Snap.Snaplet.Internal.Types.$fMonadHandler_$creturn
                     @ Application.App
                     @ Application.App
                     Site.$s$fAlternativeHandler1)
                  (Snap.Snaplet.Internal.Types.$fMonadHandler_$cfail
                     @ Application.App
                     @ Application.App
                     Site.$s$fAlternativeHandler1) -}
bd4a8a3c73cbdaca65d1fca031ac65e5
  $s$fHasPostgresHandler_$s$fMonadIOHandler ::
    Control.Monad.IO.Class.MonadIO
      (Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Snap.Snaplet.Internal.Types.Handler
                       Application.App Application.App)
                  Site.$s$fHasPostgresHandler3
                  (Snap.Snaplet.Internal.Types.$fMonadIOHandler_$cliftIO
                     @ Application.App
                     @ Application.App
                     Site.$s$fHasPostgresHandler3) -}
ab661a6bd3c02056a2e4f89ffdb35030
  $s$fMonadPlusHandler ::
    GHC.Base.MonadPlus
      (Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Snap.Snaplet.Internal.Types.Handler
                       Application.App Application.App)
                  Site.$s$fMonadPlusHandler1
                  Site.$s$fHasPostgresHandler3
                  (Snap.Snaplet.Internal.Types.$fMonadPlusHandler_$cmzero
                     @ Application.App
                     @ Application.App
                     Site.$s$fMonadPlusHandler1
                     Site.$s$fHasPostgresHandler3)
                  (Snap.Snaplet.Internal.Types.$fMonadPlusHandler_$cmplus
                     @ Application.App
                     @ Application.App
                     Site.$s$fMonadPlusHandler1
                     Site.$s$fHasPostgresHandler3) -}
a6a3d5abee845344a7767ddd242a65d4
  $s$fMonadPlusHandler1 ::
    GHC.Base.Alternative
      (Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Site.$s$fAlternativeHandler -}
956c7aa8873b1152b28926c8f5bd81dd
  $s$fMonadSnapHandler ::
    Snap.Internal.Types.MonadSnap
      (Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Snap.Snaplet.Internal.Types.Handler
                       Application.App Application.App)
                  Site.$s$fHasPostgresHandler3
                  Site.$s$fHasPostgresHandler2
                  Site.$s$fHasPostgresHandler1
                  Site.$s$fMonadSnapHandler1
                  (Snap.Snaplet.Internal.Types.$fFunctorHandler
                     @ Application.App
                     @ Application.App)
                  Site.$s$fAlternativeHandler1
                  Site.$s$fMonadPlusHandler1
                  (Snap.Snaplet.Internal.Types.$fMonadSnapHandler_$cliftSnap
                     @ Application.App
                     @ Application.App
                     Site.$s$fHasPostgresHandler3
                     Site.$s$fHasPostgresHandler2
                     Site.$s$fHasPostgresHandler1
                     Site.$s$fMonadSnapHandler1
                     (Snap.Snaplet.Internal.Types.$fFunctorHandler
                        @ Application.App
                        @ Application.App)
                     Site.$s$fAlternativeHandler1
                     Site.$s$fMonadPlusHandler1) -}
c0a13c9d7d27d7f7b65e07d0fa7a36f5
  $s$fMonadSnapHandler1 ::
    GHC.Base.MonadPlus
      (Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Site.$s$fMonadPlusHandler -}
0554f02af741db15aa725204ab902728
  $smethod1 ::
    Control.Lens.Lens.ALens'
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Internal.Types.SnapState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Enumerator.Internal.Step
            Data.ByteString.Internal.ByteString
            GHC.Types.IO
            (Snap.Internal.Types.SnapResult
               ((),
                Snap.Snaplet.Internal.Types.Snaplet Application.App,
                Snap.Snaplet.Internal.Types.Snaplet Application.App),
             Snap.Internal.Types.SnapState) #)
  {- Arity: 5, HasNoCafRefs, Strictness: <L,A><L,U><L,U><L,U><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ eta1 :: Control.Lens.Lens.ALens'
                             (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                             (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                   eta2 :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                   eta3 :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                   eta4 :: Snap.Internal.Types.SnapState
                   eta5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta5,
                    Data.Enumerator.Internal.Yield
                      @ Data.ByteString.Internal.ByteString
                      @ GHC.Types.IO
                      @ (Snap.Internal.Types.SnapResult
                           ((),
                            Snap.Snaplet.Internal.Types.Snaplet Application.App,
                            Snap.Snaplet.Internal.Types.Snaplet Application.App),
                         Snap.Internal.Types.SnapState)
                      (Snap.Internal.Types.SnapValue
                         @ ((),
                            Snap.Snaplet.Internal.Types.Snaplet Application.App,
                            Snap.Snaplet.Internal.Types.Snaplet Application.App)
                         (GHC.Tuple.(), eta2, eta3),
                       eta4)
                      (Data.Enumerator.Internal.$fApplicativeIteratee1
                         @ Data.ByteString.Internal.ByteString) #)) -}
280b703c9d716a22413650f5ba8d0230
  $spg ::
    (Snap.Snaplet.Internal.Types.Snaplet
       Snap.Snaplet.PostgresqlSimple.Internal.Postgres
     -> Control.Lens.Internal.Context.Pretext
          (->)
          (Snap.Snaplet.Internal.Types.Snaplet
             Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
          (Snap.Snaplet.Internal.Types.Snaplet
             Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
          (Snap.Snaplet.Internal.Types.Snaplet
             Snap.Snaplet.PostgresqlSimple.Internal.Postgres))
    -> Application.App
    -> Control.Lens.Internal.Context.Pretext
         (->)
         (Snap.Snaplet.Internal.Types.Snaplet
            Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
         (Snap.Snaplet.Internal.Types.Snaplet
            Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
         Application.App
  {- Arity: 2, HasNoCafRefs, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Profunctor.Unsafe.$fProfunctor(->)_$cdimap
                   @ Application.App
                   @ (Snap.Snaplet.Internal.Types.Snaplet
                        Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                   @ (Control.Lens.Internal.Context.Pretext
                        (->)
                        (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                        (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                        (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.PostgresqlSimple.Internal.Postgres))
                   @ (Control.Lens.Internal.Context.Pretext
                        (->)
                        (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                        (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                        Application.App)
                   (\ ds :: Application.App ->
                    case ds of wild { Application.App x -> x })
                   (Control.Lens.Internal.Context.$fFunctorPretext_$cifmap
                      @ (->)
                      @ (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                      @ Application.App
                      @ (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                      @ (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                      Application.App)) -}
436818ac48a590e5a42bf6a47e8ead20
  $squery2 ::
    Database.PostgreSQL.Simple.Types.Only GHC.Types.Int
    -> [Database.PostgreSQL.Simple.ToField.Action]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Database.PostgreSQL.Simple.Types.Only GHC.Types.Int ->
                 GHC.Types.:
                   @ Database.PostgreSQL.Simple.ToField.Action
                   (Database.PostgreSQL.Simple.ToField.Plain
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Types.Int
                         Data.ByteString.Builder.Prim.ASCII.intDec
                         ds
                           `cast`
                         (Database.PostgreSQL.Simple.Types.NTCo:Only[0] <GHC.Types.Int>_R)))
                   (GHC.Types.[] @ Database.PostgreSQL.Simple.ToField.Action)) -}
3a315954ebd2634cd2c2fcc282436ab6
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 7,
     Strictness: <L,U><L,1*U(U,U,U)><L,1*U(U)><L,1*U(U)><L,1*U(U,U,U)><L,1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: Data.Text.Internal.Text
                   ww2 :: GHC.Types.Int
                   ww3 :: GHC.Types.Int
                   ww4 :: Data.Text.Internal.Text
                   ww5 :: Data.Text.Internal.Text
                   w3 :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Site.$fShowClue9
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Site.$fShowClue8
                          (case Data.Text.Show.$w$cshowsPrec
                                  ww1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     Site.$fShowClue7
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        Site.$fShowClue6
                                        (case ww2 of ww6 { GHC.Types.I# ww7 ->
                                         case GHC.Show.$wshowSignedInt
                                                0
                                                ww7
                                                (GHC.Base.++
                                                   @ GHC.Types.Char
                                                   Site.$fShowClue7
                                                   (GHC.Base.++
                                                      @ GHC.Types.Char
                                                      Site.$fShowClue5
                                                      (case ww3 of ww8 { GHC.Types.I# ww9 ->
                                                       case GHC.Show.$wshowSignedInt
                                                              0
                                                              ww9
                                                              (GHC.Base.++
                                                                 @ GHC.Types.Char
                                                                 Site.$fShowClue7
                                                                 (GHC.Base.++
                                                                    @ GHC.Types.Char
                                                                    Site.$fShowClue4
                                                                    (case Data.Text.Show.$w$cshowsPrec
                                                                            ww4
                                                                            (GHC.Base.++
                                                                               @ GHC.Types.Char
                                                                               Site.$fShowClue7
                                                                               (GHC.Base.++
                                                                                  @ GHC.Types.Char
                                                                                  Site.$fShowClue3
                                                                                  (case Data.Text.Show.$w$cshowsPrec
                                                                                          ww5
                                                                                          (GHC.Base.++
                                                                                             @ GHC.Types.Char
                                                                                             Site.$fShowClue2
                                                                                             x) of ww10 { (#,#) ww11 ww12 ->
                                                                                   GHC.Types.:
                                                                                     @ GHC.Types.Char
                                                                                     ww11
                                                                                     ww12 }))) of ww10 { (#,#) ww11 ww12 ->
                                                                     GHC.Types.:
                                                                       @ GHC.Types.Char
                                                                       ww11
                                                                       ww12 }))) of ww10 { (#,#) ww11 ww12 ->
                                                       GHC.Types.:
                                                         @ GHC.Types.Char
                                                         ww11
                                                         ww12 } }))) of ww8 { (#,#) ww9 ww10 ->
                                         GHC.Types.:
                                           @ GHC.Types.Char
                                           ww9
                                           ww10 } }))) of ww6 { (#,#) ww7 ww8 ->
                           GHC.Types.: @ GHC.Types.Char ww7 ww8 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w3
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w3)) }) -}
2692f882f7c6c3194863f8909ad06268
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> [Data.Text.Internal.Text]
    -> Data.Text.Internal.Text
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 7,
     Strictness: <L,U><L,1*U(U,U,U)><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(U,U,U)><L,U>,
     Inline: [0] -}
de079c22233c35a43a27795bdf453396
  $w$ctoJSON :: Site.Clue -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1,
     Strictness: <L,U(1*U(U,U,U),1*U(U),1*U(U),1*U(U,U,U),1*U(U,U,U))>,
     Inline: [0],
     Unfolding: (\ w3 :: Site.Clue ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Site.$fToJSONClue5,
                            case w3 of wild { Site.Clue ds ds1 ds2 ds3 ds4 ->
                            case ds of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                            Data.Aeson.Types.Internal.String dt } })
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Site.$fToJSONClue4,
                               case w3 of wild { Site.Clue ds ds1 ds2 ds3 ds4 ->
                               case ds1 of wild1 { GHC.Types.I# i ->
                               case GHC.Integer.Type.smallInteger i of dt { DEFAULT ->
                               Data.Aeson.Types.Internal.Number
                                 (Data.Scientific.Scientific dt 0) } } })
                              (GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Pair
                                 (Site.$fToJSONClue3,
                                  case w3 of wild { Site.Clue ds ds1 ds2 ds3 ds4 ->
                                  case ds2 of wild1 { GHC.Types.I# i ->
                                  case GHC.Integer.Type.smallInteger i of dt { DEFAULT ->
                                  Data.Aeson.Types.Internal.Number
                                    (Data.Scientific.Scientific dt 0) } } })
                                 (GHC.Types.:
                                    @ Data.Aeson.Types.Internal.Pair
                                    (Site.$fToJSONClue2,
                                     case w3 of wild { Site.Clue ds ds1 ds2 ds3 ds4 ->
                                     case ds3 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                                     Data.Aeson.Types.Internal.String dt } })
                                    (GHC.Types.:
                                       @ Data.Aeson.Types.Internal.Pair
                                       (Site.$fToJSONClue1,
                                        case w3 of wild { Site.Clue ds ds1 ds2 ds3 ds4 ->
                                        case ds4 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                                        Data.Aeson.Types.Internal.String dt } })
                                       (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))))))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 (# dt #) }) -}
b7008fa1f04454b2de3453c8881f882d
  $w$ctoJSON1 ::
    Site.Question -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1,
     Strictness: <L,U(1*U(U,U,U),1*U(U),1*U(U),1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: (\ w3 :: Site.Question ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Site.$fToJSONClue5,
                            case w3 of wild { Site.Question ds ds1 ds2 ds3 ds4 ->
                            case ds of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                            Data.Aeson.Types.Internal.String dt } })
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Site.$fToJSONClue4,
                               case w3 of wild { Site.Question ds ds1 ds2 ds3 ds4 ->
                               case ds1 of wild1 { GHC.Types.I# i ->
                               case GHC.Integer.Type.smallInteger i of dt { DEFAULT ->
                               Data.Aeson.Types.Internal.Number
                                 (Data.Scientific.Scientific dt 0) } } })
                              (GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Pair
                                 (Site.$fToJSONClue3,
                                  case w3 of wild { Site.Question ds ds1 ds2 ds3 ds4 ->
                                  case ds2 of wild1 { GHC.Types.I# i ->
                                  case GHC.Integer.Type.smallInteger i of dt { DEFAULT ->
                                  Data.Aeson.Types.Internal.Number
                                    (Data.Scientific.Scientific dt 0) } } })
                                 (GHC.Types.:
                                    @ Data.Aeson.Types.Internal.Pair
                                    (Site.$fToJSONClue2,
                                     case w3 of wild { Site.Question ds ds1 ds2 ds3 ds4 ->
                                     case Site.$wa3 ds3 of ww { (##) ww1 ->
                                     Data.Aeson.Types.Internal.Array ww1 } })
                                    (GHC.Types.:
                                       @ Data.Aeson.Types.Internal.Pair
                                       (Site.$fToJSONClue1,
                                        case w3 of wild { Site.Question ds ds1 ds2 ds3 ds4 ->
                                        case ds4 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                                        Data.Aeson.Types.Internal.String dt } })
                                       (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))))))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 (# dt #) }) -}
706d1b0e06386791a4a27e9b7b2f4e48
  $wa ::
    GHC.Prim.Int#
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> Database.PostgreSQL.Simple.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Database.PostgreSQL.Simple.Ok.Ok
            (GHC.Types.Int -> Site.BareClue,
             Database.PostgreSQL.LibPQ.Column) #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.Int#
                   w3 :: Database.PostgreSQL.Simple.Internal.Connection
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Database.PostgreSQL.Simple.FromRow.$wa
                        @ GHC.Types.Int
                        Database.PostgreSQL.Simple.FromField.$fFromFieldInt_$cfromField
                        ww
                        ww1
                        ww2
                        ww3
                        w3
                        w4 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    case ipv1 of wild {
                      Database.PostgreSQL.Simple.Ok.Errors a34
                      -> Database.PostgreSQL.Simple.Ok.Errors
                           @ (GHC.Types.Int -> Site.BareClue,
                              Database.PostgreSQL.LibPQ.Column)
                           a34
                      Database.PostgreSQL.Simple.Ok.Ok a34
                      -> case a34 of wild1 { (,) a35 s' ->
                         Database.PostgreSQL.Simple.Ok.Ok
                           @ (GHC.Types.Int -> Site.BareClue,
                              Database.PostgreSQL.LibPQ.Column)
                           (Site.BareClue a35, s') } } #) }) -}
b42a006173109e70ce9635939ffd0292
  $wa1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> Database.PostgreSQL.Simple.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Database.PostgreSQL.Simple.Ok.Ok
            (GHC.Types.Int
             -> GHC.Types.Int
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> GHC.Types.Int
             -> GHC.Types.Int
             -> Site.RawClue,
             Database.PostgreSQL.LibPQ.Column) #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.Int#
                   w3 :: Database.PostgreSQL.Simple.Internal.Connection
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Database.PostgreSQL.Simple.FromRow.$wa
                        @ Data.Text.Internal.Text
                        Database.PostgreSQL.Simple.FromField.$fFromFieldText_$cfromField1
                        ww
                        ww1
                        ww2
                        ww3
                        w3
                        w4 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    case ipv1 of wild {
                      Database.PostgreSQL.Simple.Ok.Errors a34
                      -> Database.PostgreSQL.Simple.Ok.Errors
                           @ (GHC.Types.Int
                              -> GHC.Types.Int
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> GHC.Types.Int
                              -> GHC.Types.Int
                              -> Site.RawClue,
                              Database.PostgreSQL.LibPQ.Column)
                           a34
                      Database.PostgreSQL.Simple.Ok.Ok a34
                      -> case a34 of wild1 { (,) a35 s' ->
                         Database.PostgreSQL.Simple.Ok.Ok
                           @ (GHC.Types.Int
                              -> GHC.Types.Int
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> GHC.Types.Int
                              -> GHC.Types.Int
                              -> Site.RawClue,
                              Database.PostgreSQL.LibPQ.Column)
                           (Site.RawClue a35, s') } } #) }) -}
1eb10af2515019bf36f20e14804fab42
  $wa2 ::
    GHC.Prim.Int#
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> Database.PostgreSQL.Simple.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Database.PostgreSQL.Simple.Ok.Ok
            (Data.Text.Internal.Text
             -> GHC.Types.Int
             -> GHC.Types.Int
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Site.RawQuestion,
             Database.PostgreSQL.LibPQ.Column) #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.Int#
                   w3 :: Database.PostgreSQL.Simple.Internal.Connection
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Database.PostgreSQL.Simple.FromRow.$wa
                        @ GHC.Types.Int
                        Database.PostgreSQL.Simple.FromField.$fFromFieldInt_$cfromField
                        ww
                        ww1
                        ww2
                        ww3
                        w3
                        w4 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    case ipv1 of wild {
                      Database.PostgreSQL.Simple.Ok.Errors a34
                      -> Database.PostgreSQL.Simple.Ok.Errors
                           @ (Data.Text.Internal.Text
                              -> GHC.Types.Int
                              -> GHC.Types.Int
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Site.RawQuestion,
                              Database.PostgreSQL.LibPQ.Column)
                           a34
                      Database.PostgreSQL.Simple.Ok.Ok a34
                      -> case a34 of wild1 { (,) a35 s' ->
                         Database.PostgreSQL.Simple.Ok.Ok
                           @ (Data.Text.Internal.Text
                              -> GHC.Types.Int
                              -> GHC.Types.Int
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Site.RawQuestion,
                              Database.PostgreSQL.LibPQ.Column)
                           (Site.RawQuestion a35, s') } } #) }) -}
776b5471897b45f1fb51e32b9c1d0265
  $wa3 ::
    [Data.Text.Internal.Text] -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w3 :: [Data.Text.Internal.Text] ->
                 case GHC.ST.runSTRep
                        @ (Data.Vector.Vector Data.Aeson.Types.Internal.Value)
                        (\ @ s s1 :: GHC.Prim.State# s[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                0
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                             <s>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                         case Site.$fToJSONQuestion2
                                @ s
                                GHC.Types.SPEC
                                ((Data.Vector.Mutable.MVector
                                    @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                    @ Data.Aeson.Types.Internal.Value
                                    0
                                    0
                                    ipv1)
                                   `cast`
                                 (Sub (Sym (Data.Vector.TFCo:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                     (GHC.ST.ST
                                                                                        s)>_N <Data.Aeson.Types.Internal.Value>_N),
                                 Site.$fToJSONQuestion1)
                                (GHC.Base.map
                                   @ Data.Text.Internal.Text
                                   @ Data.Aeson.Types.Internal.Value
                                   Data.Aeson.Types.Internal.$WString
                                   w3)
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                        <s>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                         case ipv7 of wild5 { (,) v' n ->
                         case v'
                                `cast`
                              (Sub (Data.Vector.TFCo:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                            (GHC.ST.ST
                                                                               s)>_N <Data.Aeson.Types.Internal.Value>_N) of wild { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                         case n of dt5 { GHC.Types.I# dt6 ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                @ Data.Aeson.Types.Internal.Value
                                dt2
                                ipv6
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                             <s>_N)))_R of ds4 { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.TFCo:R:PrimStateST[0] <s>_N))_R,
                            Data.Vector.Vector
                              @ Data.Aeson.Types.Internal.Value
                              dt
                              dt6
                              ipv3 #) } } } } } }) of dt { Data.Vector.Vector ipv ipv1 ipv2 ->
                 (# dt #) }) -}
fa22675f10ab6671d11e0d5380d80f07
  $wa4 ::
    Control.Lens.Lens.ALens'
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
    -> GHC.Types.Bool
    -> GHC.IORef.IORef (GHC.Types.IO ())
    -> [(Data.ByteString.Internal.ByteString,
         Snap.Snaplet.Internal.Types.Handler
           Application.App Application.App ())]
    -> (Snap.Snaplet.Internal.Types.Handler
          Application.App Application.App ()
        -> Snap.Snaplet.Internal.Types.Handler
             Application.App Application.App ())
    -> Snap.Snaplet.Internal.Types.SnapletConfig
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Data.Text.Internal.Text
    -> GHC.Base.String
    -> ((Snap.Snaplet.Internal.Types.Snaplet Application.App
         -> Snap.Snaplet.Internal.Types.Snaplet Application.App)
        -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((Snap.Snaplet.Internal.Types.Snaplet Application.App,
            Snap.Snaplet.Internal.Types.InitializerState Application.App),
           Snap.Snaplet.Internal.Types.Hook Application.App) #)
  {- Arity: 10,
     Strictness: <L,U><S,1*U><L,U><L,U><L,U><L,1*U(U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w3 :: Control.Lens.Lens.ALens'
                           (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                           (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                   ww :: GHC.Types.Bool
                   ww1 :: GHC.IORef.IORef (GHC.Types.IO ())
                   ww2 :: [(Data.ByteString.Internal.ByteString,
                            Snap.Snaplet.Internal.Types.Handler
                              Application.App Application.App ())]
                   ww3 :: Snap.Snaplet.Internal.Types.Handler
                            Application.App Application.App ()
                          -> Snap.Snaplet.Internal.Types.Handler
                               Application.App Application.App ()
                   ww4 :: Snap.Snaplet.Internal.Types.SnapletConfig
                   ww5 :: GHC.Prim.MutVar# GHC.Prim.RealWorld Data.Text.Internal.Text
                   ww6 :: GHC.Base.String
                   ww7 :: (Snap.Snaplet.Internal.Types.Snaplet Application.App
                           -> Snap.Snaplet.Internal.Types.Snaplet Application.App)
                          -> GHC.Types.IO ()
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Snap.Snaplet.Internal.Initializer.$wa2
                   @ Application.App
                   @ Application.App
                   Site.app25
                   Site.app24
                   (GHC.Base.Nothing @ (GHC.Types.IO GHC.IO.FilePath))
                   Site.app2
                     `cast`
                   (Trans
                        (<Control.Lens.Lens.ALens'
                            (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                            (Snap.Snaplet.Internal.Types.Snaplet Application.App)>_R
                         ->_R <Snap.Snaplet.Internal.Types.InitializerState
                                 Application.App>_R
                         ->_R Trans
                                  (Sym (GHC.Types.NTCo:IO[0]
                                            <((Application.App,
                                               Snap.Snaplet.Internal.Types.InitializerState
                                                 Application.App),
                                              Snap.Snaplet.Internal.Types.Hook Application.App)>_R))
                                  (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                            <Snap.Snaplet.Internal.Types.Hook Application.App>_N
                                            <GHC.Types.IO>_R
                                            <(Application.App,
                                              Snap.Snaplet.Internal.Types.InitializerState
                                                Application.App)>_N)))
                        (Trans
                             (Sym (Snap.Snaplet.Internal.RST.NTCo:RST[0]
                                       <Control.Lens.Lens.ALens'
                                          (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                                          (Snap.Snaplet.Internal.Types.Snaplet Application.App)>_R
                                       <Snap.Snaplet.Internal.Types.InitializerState
                                          Application.App>_N
                                       <Control.Monad.Trans.Writer.Lazy.WriterT
                                          (Snap.Snaplet.Internal.Types.Hook Application.App)
                                          GHC.Types.IO>_R
                                       <Application.App>_N))
                             (Trans
                                  (Sym (Snap.Snaplet.Internal.LensT.NTCo:LensT[0]
                                            <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N
                                            <Snap.Snaplet.Internal.Types.Snaplet
                                               Application.App>_N) <Snap.Snaplet.Internal.Types.InitializerState
                                                                      Application.App>_N <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                                            (Snap.Snaplet.Internal.Types.Hook
                                                                                               Application.App)
                                                                                            GHC.Types.IO>_N)
                                  (Sym (Snap.Snaplet.Internal.Types.NTCo:Initializer[0]
                                            <Application.App>_N
                                            <Application.App>_N)) <Application.App>_N)))
                   w3
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   w4) -}
eac5e5495fe76fedb4961b265f349517
  $wa5 ::
    Control.Lens.Lens.ALens'
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
    -> GHC.Types.Bool
    -> GHC.IORef.IORef (GHC.Types.IO ())
    -> [(Data.ByteString.Internal.ByteString,
         Snap.Snaplet.Internal.Types.Handler
           Application.App Application.App ())]
    -> (Snap.Snaplet.Internal.Types.Handler
          Application.App Application.App ()
        -> Snap.Snaplet.Internal.Types.Handler
             Application.App Application.App ())
    -> Snap.Snaplet.Internal.Types.SnapletConfig
    -> GHC.IORef.IORef Data.Text.Internal.Text
    -> GHC.Base.String
    -> ((Snap.Snaplet.Internal.Types.Snaplet Application.App
         -> Snap.Snaplet.Internal.Types.Snaplet Application.App)
        -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((Application.App,
            Snap.Snaplet.Internal.Types.InitializerState Application.App),
           Snap.Snaplet.Internal.Types.Hook Application.App) #)
  {- Arity: 10,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w3 :: Control.Lens.Lens.ALens'
                           (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                           (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                   ww :: GHC.Types.Bool
                   ww1 :: GHC.IORef.IORef (GHC.Types.IO ())
                   ww2 :: [(Data.ByteString.Internal.ByteString,
                            Snap.Snaplet.Internal.Types.Handler
                              Application.App Application.App ())]
                   ww3 :: Snap.Snaplet.Internal.Types.Handler
                            Application.App Application.App ()
                          -> Snap.Snaplet.Internal.Types.Handler
                               Application.App Application.App ()
                   ww4 :: Snap.Snaplet.Internal.Types.SnapletConfig
                   ww5 :: GHC.IORef.IORef Data.Text.Internal.Text
                   ww6 :: GHC.Base.String
                   ww7 :: (Snap.Snaplet.Internal.Types.Snaplet Application.App
                           -> Snap.Snaplet.Internal.Types.Snaplet Application.App)
                          -> GHC.Types.IO ()
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Snap.Snaplet.Internal.Initializer.nestSnaplet1
                         @ Application.App
                         @ Snap.Snaplet.PostgresqlSimple.Internal.Postgres
                         @ Application.App
                         Site.app23
                         Site.$spg
                         (Snap.Snaplet.PostgresqlSimple.pgsInit1 @ Application.App)
                           `cast`
                         (Trans
                              (<Control.Lens.Lens.ALens'
                                  (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                                  (Snap.Snaplet.Internal.Types.Snaplet
                                     Snap.Snaplet.PostgresqlSimple.Internal.Postgres)>_R
                               ->_R <Snap.Snaplet.Internal.Types.InitializerState
                                       Application.App>_R
                               ->_R Trans
                                        (Sym (GHC.Types.NTCo:IO[0]
                                                  <((Snap.Snaplet.Internal.Types.Snaplet
                                                       Snap.Snaplet.PostgresqlSimple.Internal.Postgres,
                                                     Snap.Snaplet.Internal.Types.InitializerState
                                                       Application.App),
                                                    Snap.Snaplet.Internal.Types.Hook
                                                      Application.App)>_R))
                                        (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                  <Snap.Snaplet.Internal.Types.Hook
                                                     Application.App>_N
                                                  <GHC.Types.IO>_R
                                                  <(Snap.Snaplet.Internal.Types.Snaplet
                                                      Snap.Snaplet.PostgresqlSimple.Internal.Postgres,
                                                    Snap.Snaplet.Internal.Types.InitializerState
                                                      Application.App)>_N)))
                              (Trans
                                   (Sym (Snap.Snaplet.Internal.RST.NTCo:RST[0]
                                             <Control.Lens.Lens.ALens'
                                                (Snap.Snaplet.Internal.Types.Snaplet
                                                   Application.App)
                                                (Snap.Snaplet.Internal.Types.Snaplet
                                                   Snap.Snaplet.PostgresqlSimple.Internal.Postgres)>_R
                                             <Snap.Snaplet.Internal.Types.InitializerState
                                                Application.App>_N
                                             <Control.Monad.Trans.Writer.Lazy.WriterT
                                                (Snap.Snaplet.Internal.Types.Hook Application.App)
                                                GHC.Types.IO>_R
                                             <Snap.Snaplet.Internal.Types.Snaplet
                                                Snap.Snaplet.PostgresqlSimple.Internal.Postgres>_N))
                                   (Trans
                                        (Trans
                                             (Sym (Snap.Snaplet.Internal.LensT.NTCo:LensT[0]
                                                       <Snap.Snaplet.Internal.Types.Snaplet
                                                          Application.App>_N
                                                       <Snap.Snaplet.Internal.Types.Snaplet
                                                          Snap.Snaplet.PostgresqlSimple.Internal.Postgres>_N) <Snap.Snaplet.Internal.Types.InitializerState
                                                                                                                 Application.App>_N <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                                                                                       (Snap.Snaplet.Internal.Types.Hook
                                                                                                                                          Application.App)
                                                                                                                                       GHC.Types.IO>_N)
                                             (Sym (Snap.Snaplet.Internal.Types.NTCo:Initializer[0]
                                                       <Application.App>_N
                                                       <Snap.Snaplet.PostgresqlSimple.Internal.Postgres>_N)) <Snap.Snaplet.Internal.Types.Snaplet
                                                                                                                Snap.Snaplet.PostgresqlSimple.Internal.Postgres>_N)
                                        (Sym (Snap.Snaplet.Internal.Types.NTCo:SnapletInit[0]
                                                  <Application.App>_N
                                                  <Snap.Snaplet.PostgresqlSimple.Internal.Postgres>_N)))))
                         w3
                         (Snap.Snaplet.Internal.Types.InitializerState
                            @ Application.App
                            ww
                            ww1
                            ww2
                            ww3
                            ww4
                            ww5
                            ww6
                            ww7))
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                <Snap.Snaplet.Internal.Types.Hook Application.App>_N
                                <GHC.Types.IO>_R
                                <(Snap.Snaplet.Internal.Types.Snaplet
                                    Snap.Snaplet.PostgresqlSimple.Internal.Postgres,
                                  Snap.Snaplet.Internal.Types.InitializerState Application.App)>_N)
                           (GHC.Types.NTCo:IO[0]
                                <((Snap.Snaplet.Internal.Types.Snaplet
                                     Snap.Snaplet.PostgresqlSimple.Internal.Postgres,
                                   Snap.Snaplet.Internal.Types.InitializerState Application.App),
                                  Snap.Snaplet.Internal.Types.Hook Application.App)>_R))
                        w4 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a17 w6 ->
                 case a17 of wild1 { (,) a18 s' ->
                 case s' of s'1 { Snap.Snaplet.Internal.Types.InitializerState ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ->
                 case Snap.Snaplet.Internal.Initializer.$wa1
                        @ Application.App
                        @ Application.App
                        Site.routes
                        w3
                        ipv2
                        ipv3
                        ipv4
                        ipv5
                        ipv6
                        ipv7
                        ipv8
                        ipv9
                        ipv of ds2 { (#,#) ipv11 ipv12 ->
                 case ipv12 of wild2 { (,) a19 w5 ->
                 case a19 of wild3 { (,) a20 s'2 ->
                 case s'2 of s'3 { Snap.Snaplet.Internal.Types.InitializerState ipv13 ipv14 ipv15 ipv16 ipv17 ipv18 ipv19 ipv20 ->
                 (# ipv11,
                    ((Application.App a18, s'3),
                     (\ x :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                        s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                      case (w6
                              `cast`
                            (Snap.Snaplet.Internal.Types.NTCo:Hook[0] <Application.App>_N)
                              x)
                             `cast`
                           (Trans
                                (Control.Monad.Trans.Either.NTCo:EitherT[0]
                                     <Data.Text.Internal.Text>_N
                                     <GHC.Types.IO>_R
                                     <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N)
                                (GHC.Types.NTCo:IO[0]
                                     <Data.Either.Either
                                        Data.Text.Internal.Text
                                        (Snap.Snaplet.Internal.Types.Snaplet Application.App)>_R))
                             s of ds3 { (#,#) ipv21 ipv22 ->
                      case ipv22 of wild4 {
                        Data.Either.Left l -> ds3
                        Data.Either.Right r
                        -> case (w5
                                   `cast`
                                 (Snap.Snaplet.Internal.Types.NTCo:Hook[0] <Application.App>_N)
                                   r)
                                  `cast`
                                (Trans
                                     (Control.Monad.Trans.Either.NTCo:EitherT[0]
                                          <Data.Text.Internal.Text>_N
                                          <GHC.Types.IO>_R
                                          <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N)
                                     (GHC.Types.NTCo:IO[0]
                                          <Data.Either.Either
                                             Data.Text.Internal.Text
                                             (Snap.Snaplet.Internal.Types.Snaplet
                                                Application.App)>_R))
                                  ipv21 of ds4 { (#,#) ipv23 ipv24 ->
                           case ipv24 of wild5 { DEFAULT -> ds4 } } } })
                       `cast`
                     (Trans
                          (<Snap.Snaplet.Internal.Types.Snaplet Application.App>_R
                           ->_R Trans
                                    (Sym (GHC.Types.NTCo:IO[0]
                                              <Data.Either.Either
                                                 Data.Text.Internal.Text
                                                 (Snap.Snaplet.Internal.Types.Snaplet
                                                    Application.App)>_R))
                                    (Sym (Control.Monad.Trans.Either.NTCo:EitherT[0]
                                              <Data.Text.Internal.Text>_N
                                              <GHC.Types.IO>_R
                                              <Snap.Snaplet.Internal.Types.Snaplet
                                                 Application.App>_N)))
                          (Sym (Snap.Snaplet.Internal.Types.NTCo:Hook[0]
                                    <Application.App>_N)))) #) } } } } } } } }) -}
1928686167e980abc76d34f39debc2b5
  $wa6 ::
    Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Internal.Types.SnapState
    -> Data.Enumerator.Internal.Iteratee
         Data.ByteString.Internal.ByteString
         GHC.Types.IO
         (Snap.Internal.Types.SnapResult
            (Snap.Internal.Http.Types.Request,
             Snap.Snaplet.Internal.Types.Snaplet Application.App,
             Snap.Snaplet.Internal.Types.Snaplet Application.App),
          Snap.Internal.Types.SnapState)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ w3 :: Snap.Snaplet.Internal.Types.Snaplet
                           Application.App
                   w4 :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                   w5 :: Snap.Internal.Types.SnapState ->
                 Data.Enumerator.Internal.$w$c>>=
                   @ Data.ByteString.Internal.ByteString
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Snap.Internal.Types.SnapResult Snap.Internal.Http.Types.Request,
                      Snap.Internal.Types.SnapState)
                   @ (Snap.Internal.Types.SnapResult
                        (Snap.Internal.Http.Types.Request,
                         Snap.Snaplet.Internal.Types.Snaplet Application.App,
                         Snap.Snaplet.Internal.Types.Snaplet Application.App),
                      Snap.Internal.Types.SnapState)
                   (Snap.Internal.Types.$fAlternativeSnap5
                      @ Snap.Internal.Types.SnapState
                      @ Snap.Internal.Http.Types.Request
                      Snap.Internal.Types._snapRequest
                      Snap.Internal.Types.sget
                      w5)
                   (\ ds :: (Snap.Internal.Types.SnapResult
                               Snap.Internal.Http.Types.Request,
                             Snap.Internal.Types.SnapState)
                      eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    case ds of wild { (,) a17 s' ->
                    case a17 of wild1 {
                      Snap.Internal.Types.SnapValue a75
                      -> (# eta,
                            Data.Enumerator.Internal.Yield
                              @ Data.ByteString.Internal.ByteString
                              @ GHC.Types.IO
                              @ (Snap.Internal.Types.SnapResult
                                   (Snap.Internal.Http.Types.Request,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App),
                                 Snap.Internal.Types.SnapState)
                              (Snap.Internal.Types.SnapValue
                                 @ (Snap.Internal.Http.Types.Request,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App)
                                 (a75, w3, w4),
                               s')
                              (Data.Enumerator.Internal.$fApplicativeIteratee1
                                 @ Data.ByteString.Internal.ByteString) #)
                      Snap.Internal.Types.PassOnProcessing r
                      -> (# eta,
                            Data.Enumerator.Internal.Yield
                              @ Data.ByteString.Internal.ByteString
                              @ GHC.Types.IO
                              @ (Snap.Internal.Types.SnapResult
                                   (Snap.Internal.Http.Types.Request,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App),
                                 Snap.Internal.Types.SnapState)
                              (Snap.Internal.Types.PassOnProcessing
                                 @ (Snap.Internal.Http.Types.Request,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App)
                                 r,
                               s')
                              (Data.Enumerator.Internal.$fApplicativeIteratee1
                                 @ Data.ByteString.Internal.ByteString) #)
                      Snap.Internal.Types.EarlyTermination r
                      -> (# eta,
                            Data.Enumerator.Internal.Yield
                              @ Data.ByteString.Internal.ByteString
                              @ GHC.Types.IO
                              @ (Snap.Internal.Types.SnapResult
                                   (Snap.Internal.Http.Types.Request,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App),
                                 Snap.Internal.Types.SnapState)
                              (Snap.Internal.Types.EarlyTermination
                                 @ (Snap.Internal.Http.Types.Request,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App)
                                 r,
                               s')
                              (Data.Enumerator.Internal.$fApplicativeIteratee1
                                 @ Data.ByteString.Internal.ByteString) #) } })
                     `cast`
                   (<(Snap.Internal.Types.SnapResult Snap.Internal.Http.Types.Request,
                      Snap.Internal.Types.SnapState)>_R
                    ->_R Trans
                             (Sym (GHC.Types.NTCo:IO[0]
                                       <Data.Enumerator.Internal.Step
                                          Data.ByteString.Internal.ByteString
                                          GHC.Types.IO
                                          (Snap.Internal.Types.SnapResult
                                             (Snap.Internal.Http.Types.Request,
                                              Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                              Snap.Snaplet.Internal.Types.Snaplet Application.App),
                                           Snap.Internal.Types.SnapState)>_R))
                             (Sym (Data.Enumerator.Internal.NTCo:Iteratee[0]
                                       <Data.ByteString.Internal.ByteString>_N
                                       <GHC.Types.IO>_N
                                       <(Snap.Internal.Types.SnapResult
                                           (Snap.Internal.Http.Types.Request,
                                            Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                            Snap.Snaplet.Internal.Types.Snaplet Application.App),
                                         Snap.Internal.Types.SnapState)>_N)))) -}
48f7f4e0946454e7e9f459023916843a
  $wa7 ::
    Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Internal.Types.SnapState
    -> Data.Enumerator.Internal.Iteratee
         Data.ByteString.Internal.ByteString
         GHC.Types.IO
         (Snap.Internal.Types.SnapResult
            (Snap.Internal.Http.Types.Request,
             Snap.Snaplet.Internal.Types.Snaplet Application.App,
             Snap.Snaplet.Internal.Types.Snaplet Application.App),
          Snap.Internal.Types.SnapState)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ w3 :: Snap.Snaplet.Internal.Types.Snaplet
                           Application.App
                   w4 :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                   w5 :: Snap.Internal.Types.SnapState ->
                 Data.Enumerator.Internal.$w$c>>=
                   @ Data.ByteString.Internal.ByteString
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Snap.Internal.Types.SnapResult Snap.Internal.Http.Types.Request,
                      Snap.Internal.Types.SnapState)
                   @ (Snap.Internal.Types.SnapResult
                        (Snap.Internal.Http.Types.Request,
                         Snap.Snaplet.Internal.Types.Snaplet Application.App,
                         Snap.Snaplet.Internal.Types.Snaplet Application.App),
                      Snap.Internal.Types.SnapState)
                   (Snap.Internal.Types.$fAlternativeSnap5
                      @ Snap.Internal.Types.SnapState
                      @ Snap.Internal.Http.Types.Request
                      Snap.Internal.Types._snapRequest
                      Snap.Internal.Types.sget
                      w5)
                   (\ ds :: (Snap.Internal.Types.SnapResult
                               Snap.Internal.Http.Types.Request,
                             Snap.Internal.Types.SnapState)
                      eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    case ds of wild { (,) a17 s' ->
                    case a17 of wild1 {
                      Snap.Internal.Types.SnapValue a75
                      -> (# eta,
                            Data.Enumerator.Internal.Yield
                              @ Data.ByteString.Internal.ByteString
                              @ GHC.Types.IO
                              @ (Snap.Internal.Types.SnapResult
                                   (Snap.Internal.Http.Types.Request,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App),
                                 Snap.Internal.Types.SnapState)
                              (Snap.Internal.Types.SnapValue
                                 @ (Snap.Internal.Http.Types.Request,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App)
                                 (a75, w3, w4),
                               s')
                              (Data.Enumerator.Internal.$fApplicativeIteratee1
                                 @ Data.ByteString.Internal.ByteString) #)
                      Snap.Internal.Types.PassOnProcessing r
                      -> (# eta,
                            Data.Enumerator.Internal.Yield
                              @ Data.ByteString.Internal.ByteString
                              @ GHC.Types.IO
                              @ (Snap.Internal.Types.SnapResult
                                   (Snap.Internal.Http.Types.Request,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App),
                                 Snap.Internal.Types.SnapState)
                              (Snap.Internal.Types.PassOnProcessing
                                 @ (Snap.Internal.Http.Types.Request,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App)
                                 r,
                               s')
                              (Data.Enumerator.Internal.$fApplicativeIteratee1
                                 @ Data.ByteString.Internal.ByteString) #)
                      Snap.Internal.Types.EarlyTermination r
                      -> (# eta,
                            Data.Enumerator.Internal.Yield
                              @ Data.ByteString.Internal.ByteString
                              @ GHC.Types.IO
                              @ (Snap.Internal.Types.SnapResult
                                   (Snap.Internal.Http.Types.Request,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App),
                                 Snap.Internal.Types.SnapState)
                              (Snap.Internal.Types.EarlyTermination
                                 @ (Snap.Internal.Http.Types.Request,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                    Snap.Snaplet.Internal.Types.Snaplet Application.App)
                                 r,
                               s')
                              (Data.Enumerator.Internal.$fApplicativeIteratee1
                                 @ Data.ByteString.Internal.ByteString) #) } })
                     `cast`
                   (<(Snap.Internal.Types.SnapResult Snap.Internal.Http.Types.Request,
                      Snap.Internal.Types.SnapState)>_R
                    ->_R Trans
                             (Sym (GHC.Types.NTCo:IO[0]
                                       <Data.Enumerator.Internal.Step
                                          Data.ByteString.Internal.ByteString
                                          GHC.Types.IO
                                          (Snap.Internal.Types.SnapResult
                                             (Snap.Internal.Http.Types.Request,
                                              Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                              Snap.Snaplet.Internal.Types.Snaplet Application.App),
                                           Snap.Internal.Types.SnapState)>_R))
                             (Sym (Data.Enumerator.Internal.NTCo:Iteratee[0]
                                       <Data.ByteString.Internal.ByteString>_N
                                       <GHC.Types.IO>_N
                                       <(Snap.Internal.Types.SnapResult
                                           (Snap.Internal.Http.Types.Request,
                                            Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                            Snap.Snaplet.Internal.Types.Snaplet Application.App),
                                         Snap.Internal.Types.SnapState)>_N)))) -}
706d1b0e06386791a4a27e9b7b2f4e48
  data BareClue
    = BareClue {bc_start :: GHC.Types.Int, bc_end :: GHC.Types.Int}
de079c22233c35a43a27795bdf453396
  data Clue
    = Clue {tournament :: Data.Text.Internal.Text,
            year :: GHC.Types.Int,
            packet :: GHC.Types.Int,
            content :: Data.Text.Internal.Text,
            answer :: Data.Text.Internal.Text}
b7008fa1f04454b2de3453c8881f882d
  data Question
    = Question {q_tournament :: Data.Text.Internal.Text,
                q_year :: GHC.Types.Int,
                q_packet :: GHC.Types.Int,
                q_content :: [Data.Text.Internal.Text],
                q_answer :: Data.Text.Internal.Text}
b42a006173109e70ce9635939ffd0292
  data RawClue
    = RawClue {rawClueName :: Data.Text.Internal.Text,
               rawClueYear :: GHC.Types.Int,
               rawCluePacket :: GHC.Types.Int,
               rawClueContent :: Data.Text.Internal.Text,
               rawClueAnswer :: Data.Text.Internal.Text,
               rawClueStartIndex :: GHC.Types.Int,
               rawClueEndIndex :: GHC.Types.Int}
1eb10af2515019bf36f20e14804fab42
  data RawQuestion
    = RawQuestion {rawq_id :: GHC.Types.Int,
                   rawq_name :: Data.Text.Internal.Text,
                   rawq_year :: GHC.Types.Int,
                   rawq_number :: GHC.Types.Int,
                   rawq_content :: Data.Text.Internal.Text,
                   rawq_answer :: Data.Text.Internal.Text}
d678d5223fad2f4c27d530a795e13de7
  answer :: Site.Clue -> Data.Text.Internal.Text
  RecSel Site.Clue
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLS),1*U(A,A,A,A,1*U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.Clue ->
                 case ds of wild { Site.Clue ds1 ds2 ds3 ds4 ds5 -> ds5 }) -}
7d3d04c2f3505f79dea9c95851f2660f
  app ::
    Snap.Snaplet.Internal.Types.SnapletInit
      Application.App Application.App
  {- Arity: 3,
     Strictness: <L,U><S(SLLLLSLL),1*U(1*U,U,U,U,1*U(U,U,U,U,U,U,U,U),1*U(U),U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Site.app1
                  `cast`
                (Trans
                     (<Control.Lens.Lens.ALens'
                         (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                         (Snap.Snaplet.Internal.Types.Snaplet Application.App)>_R
                      ->_R <Snap.Snaplet.Internal.Types.InitializerState
                              Application.App>_R
                      ->_R Trans
                               (Sym (GHC.Types.NTCo:IO[0]
                                         <((Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                            Snap.Snaplet.Internal.Types.InitializerState
                                              Application.App),
                                           Snap.Snaplet.Internal.Types.Hook Application.App)>_R))
                               (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                         <Snap.Snaplet.Internal.Types.Hook Application.App>_N
                                         <GHC.Types.IO>_R
                                         <(Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                           Snap.Snaplet.Internal.Types.InitializerState
                                             Application.App)>_N)))
                     (Trans
                          (Sym (Snap.Snaplet.Internal.RST.NTCo:RST[0]
                                    <Control.Lens.Lens.ALens'
                                       (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                                       (Snap.Snaplet.Internal.Types.Snaplet Application.App)>_R
                                    <Snap.Snaplet.Internal.Types.InitializerState Application.App>_N
                                    <Control.Monad.Trans.Writer.Lazy.WriterT
                                       (Snap.Snaplet.Internal.Types.Hook Application.App)
                                       GHC.Types.IO>_R
                                    <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N))
                          (Trans
                               (Trans
                                    (Sym (Snap.Snaplet.Internal.LensT.NTCo:LensT[0]
                                              <Snap.Snaplet.Internal.Types.Snaplet
                                                 Application.App>_N
                                              <Snap.Snaplet.Internal.Types.Snaplet
                                                 Application.App>_N) <Snap.Snaplet.Internal.Types.InitializerState
                                                                        Application.App>_N <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                                              (Snap.Snaplet.Internal.Types.Hook
                                                                                                 Application.App)
                                                                                              GHC.Types.IO>_N)
                                    (Sym (Snap.Snaplet.Internal.Types.NTCo:Initializer[0]
                                              <Application.App>_N
                                              <Application.App>_N)) <Snap.Snaplet.Internal.Types.Snaplet
                                                                       Application.App>_N)
                               (Sym (Snap.Snaplet.Internal.Types.NTCo:SnapletInit[0]
                                         <Application.App>_N <Application.App>_N))))) -}
ec7c5ca15405b4e10608dbef5bdaf5f1
  app1 ::
    Control.Lens.Lens.ALens'
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
    -> Snap.Snaplet.Internal.Types.InitializerState Application.App
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((Snap.Snaplet.Internal.Types.Snaplet Application.App,
            Snap.Snaplet.Internal.Types.InitializerState Application.App),
           Snap.Snaplet.Internal.Types.Hook Application.App) #)
  {- Arity: 3,
     Strictness: <L,U><S(SLLLLSLL),1*U(1*U,U,U,U,1*U(U,U,U,U,U,U,U,U),1*U(U),U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w3 :: Control.Lens.Lens.ALens'
                           (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                           (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                   w4 :: Snap.Snaplet.Internal.Types.InitializerState Application.App
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { Snap.Snaplet.Internal.Types.InitializerState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww6
                        `cast`
                      (GHC.IORef.NTCo:IORef[0] <Data.Text.Internal.Text>_N) of ww9 { GHC.STRef.STRef ww10 ->
                 Site.$wa4 w3 ww1 ww2 ww3 ww4 ww5 ww10 ww7 ww8 w5 } }) -}
a6f7b6f4a01e5582e316bbec9b780cae
  app10 ::
    (Data.ByteString.Internal.ByteString,
     Snap.Snaplet.Internal.Types.Handler
       Application.App Application.App ())
  {- Strictness: m,
     Unfolding: ((Site.app14,
                  Site.app11
                    `cast`
                  (Trans
                       (Sym (Snap.Snaplet.Internal.Lensed.NTCo:Lensed[0]
                                 <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N
                                 <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N
                                 <Snap.Internal.Types.Snap>_R
                                 <()>_N))
                       (Sym (Snap.Snaplet.Internal.Types.NTCo:Handler[0]
                                 <Application.App>_N <Application.App>_N) <()>_N)))) -}
2606be24e190b6f76cfe0be378da8d92
  app11 ::
    Control.Lens.Lens.ALens'
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Internal.Types.Snap
         ((),
          Snap.Snaplet.Internal.Types.Snaplet Application.App,
          Snap.Snaplet.Internal.Types.Snaplet Application.App)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta2 :: Control.Lens.Lens.ALens'
                             (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                             (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                   eta3 :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                   eta4 :: Snap.Snaplet.Internal.Types.Snaplet Application.App ->
                 Snap.Snaplet.Internal.Types.$fMonadHandler8
                   @ Application.App
                   @ Application.App
                   @ Snap.Internal.Http.Types.Request
                   @ ()
                   Site.app13
                     `cast`
                   (Trans
                        (<Control.Lens.Lens.ALens'
                            (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                            (Snap.Snaplet.Internal.Types.Snaplet Application.App)>_R
                         ->_R <Snap.Snaplet.Internal.Types.Snaplet Application.App>_R
                         ->_R <Snap.Snaplet.Internal.Types.Snaplet Application.App>_R
                         ->_R Trans
                                  (Sym (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                                            <Snap.Internal.Types.SnapState>_N
                                            <Data.Enumerator.Internal.Iteratee
                                               Data.ByteString.Internal.ByteString GHC.Types.IO>_R
                                            <Snap.Internal.Types.SnapResult
                                               (Snap.Internal.Http.Types.Request,
                                                Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                                Snap.Snaplet.Internal.Types.Snaplet
                                                  Application.App)>_N))
                                  (Sym (Snap.Internal.Types.NTCo:Snap[0]
                                            <(Snap.Internal.Http.Types.Request,
                                              Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                              Snap.Snaplet.Internal.Types.Snaplet
                                                Application.App)>_N)))
                        (Sym (Snap.Snaplet.Internal.Lensed.NTCo:Lensed[0]
                                  <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N
                                  <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N
                                  <Snap.Internal.Types.Snap>_R
                                  <Snap.Internal.Http.Types.Request>_N)))
                   Site.app12
                     `cast`
                   (<Snap.Internal.Http.Types.Request>_R
                    ->_R Snap.Snaplet.Internal.Types.NTCo:Handler[0]
                             <Application.App>_N <Application.App>_N <()>_N)
                   eta2
                   eta3
                   eta4) -}
55670b9a3455a10aeca74b98746287fe
  app12 ::
    Snap.Internal.Http.Types.Request
    -> Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App ()
  {- Arity: 1,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,1*H,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)> -}
40d44b9be0210b4a80cfe93190feee51
  app13 ::
    Control.Lens.Lens.ALens'
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Internal.Types.SnapState
    -> Data.Enumerator.Internal.Iteratee
         Data.ByteString.Internal.ByteString
         GHC.Types.IO
         (Snap.Internal.Types.SnapResult
            (Snap.Internal.Http.Types.Request,
             Snap.Snaplet.Internal.Types.Snaplet Application.App,
             Snap.Snaplet.Internal.Types.Snaplet Application.App),
          Snap.Internal.Types.SnapState)
  {- Arity: 4, Strictness: <L,A><L,U><L,U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ w3 :: Control.Lens.Lens.ALens'
                           (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                           (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                   w4 :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                   w5 :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                   w6 :: Snap.Internal.Types.SnapState ->
                 Site.$wa7 w4 w5 w6) -}
77621e1785119a8fcd2dcbab79175ba5
  app14 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "/clues/random"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
f8d545ad90978f99a0f92042e860582e
  app15 ::
    (Data.ByteString.Internal.ByteString,
     Snap.Snaplet.Internal.Types.Handler
       Application.App Application.App ())
  {- Strictness: m, Unfolding: ((Site.app21, Site.app16)) -}
73d2a5718e00935121bd3654e39dfb64
  app16 ::
    Snap.Snaplet.Internal.Types.Handler
      Application.App Application.App ()
  {- Unfolding: (Snap.Util.FileServe.serveDirectoryWith
                   @ (Snap.Snaplet.Internal.Types.Handler
                        Application.App Application.App)
                   Site.$s$fMonadSnapHandler
                   Site.app18
                   Site.app17) -}
fb8e079a602c7fe8d2db81bcd3dc4e36
  app17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "/srv/bitcamp-2016/app/frontend/app"#) -}
04912a61ba0bcf3daa738ce498d6c485
  app18 ::
    Snap.Util.FileServe.DirectoryConfig
      (Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App)
  {- Strictness: m,
     Unfolding: (Snap.Util.FileServe.DirectoryConfig
                   @ (Snap.Snaplet.Internal.Types.Handler
                        Application.App Application.App)
                   Snap.Util.FileServe.defaultDirectoryConfig1
                   Site.app20
                     `cast`
                   (<GHC.IO.FilePath>_R
                    ->_R Trans
                             (<Control.Lens.Lens.ALens'
                                 (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                                 (Snap.Snaplet.Internal.Types.Snaplet Application.App)>_R
                              ->_R <Snap.Snaplet.Internal.Types.Snaplet Application.App>_R
                              ->_R <Snap.Snaplet.Internal.Types.Snaplet Application.App>_R
                              ->_R Trans
                                       (Sym (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                                                 <Snap.Internal.Types.SnapState>_N
                                                 <Data.Enumerator.Internal.Iteratee
                                                    Data.ByteString.Internal.ByteString
                                                    GHC.Types.IO>_R
                                                 <Snap.Internal.Types.SnapResult
                                                    ((),
                                                     Snap.Snaplet.Internal.Types.Snaplet
                                                       Application.App,
                                                     Snap.Snaplet.Internal.Types.Snaplet
                                                       Application.App)>_N))
                                       (Sym (Snap.Internal.Types.NTCo:Snap[0]
                                                 <((),
                                                   Snap.Snaplet.Internal.Types.Snaplet
                                                     Application.App,
                                                   Snap.Snaplet.Internal.Types.Snaplet
                                                     Application.App)>_N)))
                             (Trans
                                  (Sym (Snap.Snaplet.Internal.Lensed.NTCo:Lensed[0]
                                            <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N
                                            <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N
                                            <Snap.Internal.Types.Snap>_R
                                            <()>_N))
                                  (Sym (Snap.Snaplet.Internal.Types.NTCo:Handler[0]
                                            <Application.App>_N <Application.App>_N) <()>_N)))
                   (Data.HashMap.Base.Empty
                      @ GHC.IO.FilePath
                      @ (GHC.IO.FilePath
                         -> Snap.Snaplet.Internal.Types.Handler
                              Application.App Application.App ()))
                   Snap.Util.FileServe.defaultMimeTypes
                   Site.app19
                     `cast`
                   (<GHC.IO.FilePath>_R
                    ->_R Trans
                             (<Control.Lens.Lens.ALens'
                                 (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                                 (Snap.Snaplet.Internal.Types.Snaplet Application.App)>_R
                              ->_R <Snap.Snaplet.Internal.Types.Snaplet Application.App>_R
                              ->_R <Snap.Snaplet.Internal.Types.Snaplet Application.App>_R
                              ->_R Trans
                                       (<Snap.Internal.Types.SnapState>_R
                                        ->_R Trans
                                                 (Sym (GHC.Types.NTCo:IO[0]
                                                           <Data.Enumerator.Internal.Step
                                                              Data.ByteString.Internal.ByteString
                                                              GHC.Types.IO
                                                              (Snap.Internal.Types.SnapResult
                                                                 ((),
                                                                  Snap.Snaplet.Internal.Types.Snaplet
                                                                    Application.App,
                                                                  Snap.Snaplet.Internal.Types.Snaplet
                                                                    Application.App),
                                                               Snap.Internal.Types.SnapState)>_R))
                                                 (Sym (Data.Enumerator.Internal.NTCo:Iteratee[0]
                                                           <Data.ByteString.Internal.ByteString>_N
                                                           <GHC.Types.IO>_N
                                                           <(Snap.Internal.Types.SnapResult
                                                               ((),
                                                                Snap.Snaplet.Internal.Types.Snaplet
                                                                  Application.App,
                                                                Snap.Snaplet.Internal.Types.Snaplet
                                                                  Application.App),
                                                             Snap.Internal.Types.SnapState)>_N)))
                                       (Trans
                                            (Sym (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                                                      <Snap.Internal.Types.SnapState>_N
                                                      <Data.Enumerator.Internal.Iteratee
                                                         Data.ByteString.Internal.ByteString
                                                         GHC.Types.IO>_R
                                                      <Snap.Internal.Types.SnapResult
                                                         ((),
                                                          Snap.Snaplet.Internal.Types.Snaplet
                                                            Application.App,
                                                          Snap.Snaplet.Internal.Types.Snaplet
                                                            Application.App)>_N))
                                            (Sym (Snap.Internal.Types.NTCo:Snap[0]
                                                      <((),
                                                        Snap.Snaplet.Internal.Types.Snaplet
                                                          Application.App,
                                                        Snap.Snaplet.Internal.Types.Snaplet
                                                          Application.App)>_N))))
                             (Trans
                                  (Sym (Snap.Snaplet.Internal.Lensed.NTCo:Lensed[0]
                                            <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N
                                            <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N
                                            <Snap.Internal.Types.Snap>_R
                                            <()>_N))
                                  (Sym (Snap.Snaplet.Internal.Types.NTCo:Handler[0]
                                            <Application.App>_N <Application.App>_N) <()>_N)))) -}
b91a32b2020280129c9cb6aca97cc8a6
  app19 ::
    GHC.IO.FilePath
    -> Control.Lens.Lens.ALens'
         (Snap.Snaplet.Internal.Types.Snaplet Application.App)
         (Snap.Snaplet.Internal.Types.Snaplet Application.App)
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Internal.Types.SnapState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Enumerator.Internal.Step
            Data.ByteString.Internal.ByteString
            GHC.Types.IO
            (Snap.Internal.Types.SnapResult
               ((),
                Snap.Snaplet.Internal.Types.Snaplet Application.App,
                Snap.Snaplet.Internal.Types.Snaplet Application.App),
             Snap.Internal.Types.SnapState) #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,A><L,A><L,U><L,U><L,U><L,U>,
     Unfolding: InlineRule (6, True, False)
                (\ ds1 :: GHC.IO.FilePath
                   eta :: Control.Lens.Lens.ALens'
                            (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                            (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                   eta1 :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                   eta2 :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                   eta3 :: Snap.Internal.Types.SnapState
                   eta4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta4,
                    Data.Enumerator.Internal.Yield
                      @ Data.ByteString.Internal.ByteString
                      @ GHC.Types.IO
                      @ (Snap.Internal.Types.SnapResult
                           ((),
                            Snap.Snaplet.Internal.Types.Snaplet Application.App,
                            Snap.Snaplet.Internal.Types.Snaplet Application.App),
                         Snap.Internal.Types.SnapState)
                      (Snap.Internal.Types.SnapValue
                         @ ((),
                            Snap.Snaplet.Internal.Types.Snaplet Application.App,
                            Snap.Snaplet.Internal.Types.Snaplet Application.App)
                         (GHC.Tuple.(), eta1, eta2),
                       eta3)
                      (Data.Enumerator.Internal.$fApplicativeIteratee1
                         @ Data.ByteString.Internal.ByteString) #)) -}
5b7bc0943479dbee41e2b9b9d14c5a66
  app2 ::
    Control.Lens.Lens.ALens'
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
    -> Snap.Snaplet.Internal.Types.InitializerState Application.App
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((Application.App,
            Snap.Snaplet.Internal.Types.InitializerState Application.App),
           Snap.Snaplet.Internal.Types.Hook Application.App) #)
  {- Arity: 3, Strictness: <L,U><S,1*U(U,U,U,U,U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w3 :: Control.Lens.Lens.ALens'
                           (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                           (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                   w4 :: Snap.Snaplet.Internal.Types.InitializerState Application.App
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { Snap.Snaplet.Internal.Types.InitializerState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Site.$wa5 w3 ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 w5 }) -}
3f4135c4add4f3c511c5497dc1ba0b51
  app20 ::
    GHC.IO.FilePath
    -> Control.Lens.Lens.ALens'
         (Snap.Snaplet.Internal.Types.Snaplet Application.App)
         (Snap.Snaplet.Internal.Types.Snaplet Application.App)
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Internal.Types.SnapState
    -> Data.Enumerator.Internal.Iteratee
         Data.ByteString.Internal.ByteString
         GHC.Types.IO
         (Snap.Internal.Types.SnapResult
            ((),
             Snap.Snaplet.Internal.Types.Snaplet Application.App,
             Snap.Snaplet.Internal.Types.Snaplet Application.App),
          Snap.Internal.Types.SnapState)
  {- Arity: 5, Strictness: <L,A><L,A><L,U><L,U><L,U>,
     Unfolding: InlineRule (5, True, True)
                (\ ds1 :: GHC.IO.FilePath
                   eta :: Control.Lens.Lens.ALens'
                            (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                            (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                   eta1 :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                   eta2 :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                   eta3 :: Snap.Internal.Types.SnapState ->
                 Snap.Snaplet.Internal.Types.$wa
                   @ Application.App
                   @ Application.App
                   @ ()
                   eta1
                   eta2
                   eta3) -}
b54688957decbe5b7f58f99a9c876a52
  app21 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (Data.ByteString.Internal.unsafePackLenChars
                   Site.app22
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c6a366a59df7fefef332be324fddef5
  app22 :: GHC.Types.Int
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        (GHC.Types.[] @ GHC.Types.Char)
                        0 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 }) -}
76c7ce9c72d49162fc1dcf8ee001f049
  app23 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "pg"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
efae73b53eac05bc0e66f9c1ffaf2fb4
  app24 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "Bitcamp 2016 application."#) -}
7dffae0c71d4b76307174818a9b5d72b
  app25 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "bitcamp"#) -}
2ce0b75cbc373da90f590c505b3b9758
  app3 ::
    [(Data.ByteString.Internal.ByteString,
      Snap.Snaplet.Internal.Types.Handler
        Application.App Application.App ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.ByteString.Internal.ByteString,
                      Snap.Snaplet.Internal.Types.Handler
                        Application.App Application.App ())
                   Site.app10
                   Site.app4) -}
ff14d55468c7bb8ed078f8c6337f45fb
  app4 ::
    [(Data.ByteString.Internal.ByteString,
      Snap.Snaplet.Internal.Types.Handler
        Application.App Application.App ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.ByteString.Internal.ByteString,
                      Snap.Snaplet.Internal.Types.Handler
                        Application.App Application.App ())
                   Site.app5
                   (GHC.Types.[]
                      @ (Data.ByteString.Internal.ByteString,
                         Snap.Snaplet.Internal.Types.Handler
                           Application.App Application.App ()))) -}
61fcc3b07d43facf39cb449963374ede
  app5 ::
    (Data.ByteString.Internal.ByteString,
     Snap.Snaplet.Internal.Types.Handler
       Application.App Application.App ())
  {- Strictness: m,
     Unfolding: ((Site.app9,
                  Site.app6
                    `cast`
                  (Trans
                       (Sym (Snap.Snaplet.Internal.Lensed.NTCo:Lensed[0]
                                 <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N
                                 <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N
                                 <Snap.Internal.Types.Snap>_R
                                 <()>_N))
                       (Sym (Snap.Snaplet.Internal.Types.NTCo:Handler[0]
                                 <Application.App>_N <Application.App>_N) <()>_N)))) -}
836d3e31a7c0ea0a886a5eaf57bfb9f7
  app6 ::
    Control.Lens.Lens.ALens'
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Internal.Types.Snap
         ((),
          Snap.Snaplet.Internal.Types.Snaplet Application.App,
          Snap.Snaplet.Internal.Types.Snaplet Application.App)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta2 :: Control.Lens.Lens.ALens'
                             (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                             (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                   eta3 :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                   eta4 :: Snap.Snaplet.Internal.Types.Snaplet Application.App ->
                 Snap.Snaplet.Internal.Types.$fMonadHandler8
                   @ Application.App
                   @ Application.App
                   @ Snap.Internal.Http.Types.Request
                   @ ()
                   Site.app8
                     `cast`
                   (Trans
                        (<Control.Lens.Lens.ALens'
                            (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                            (Snap.Snaplet.Internal.Types.Snaplet Application.App)>_R
                         ->_R <Snap.Snaplet.Internal.Types.Snaplet Application.App>_R
                         ->_R <Snap.Snaplet.Internal.Types.Snaplet Application.App>_R
                         ->_R Trans
                                  (Sym (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                                            <Snap.Internal.Types.SnapState>_N
                                            <Data.Enumerator.Internal.Iteratee
                                               Data.ByteString.Internal.ByteString GHC.Types.IO>_R
                                            <Snap.Internal.Types.SnapResult
                                               (Snap.Internal.Http.Types.Request,
                                                Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                                Snap.Snaplet.Internal.Types.Snaplet
                                                  Application.App)>_N))
                                  (Sym (Snap.Internal.Types.NTCo:Snap[0]
                                            <(Snap.Internal.Http.Types.Request,
                                              Snap.Snaplet.Internal.Types.Snaplet Application.App,
                                              Snap.Snaplet.Internal.Types.Snaplet
                                                Application.App)>_N)))
                        (Sym (Snap.Snaplet.Internal.Lensed.NTCo:Lensed[0]
                                  <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N
                                  <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N
                                  <Snap.Internal.Types.Snap>_R
                                  <Snap.Internal.Http.Types.Request>_N)))
                   Site.app7
                     `cast`
                   (<Snap.Internal.Http.Types.Request>_R
                    ->_R Snap.Snaplet.Internal.Types.NTCo:Handler[0]
                             <Application.App>_N <Application.App>_N <()>_N)
                   eta2
                   eta3
                   eta4) -}
a225892ee50f3673b2a45d6fbba42a7e
  app7 ::
    Snap.Internal.Http.Types.Request
    -> Snap.Snaplet.Internal.Types.Handler
         Application.App Application.App ()
  {- Arity: 1,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,1*H,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)> -}
b6768bc7bc2953d20ebe6b4e33739808
  app8 ::
    Control.Lens.Lens.ALens'
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Internal.Types.SnapState
    -> Data.Enumerator.Internal.Iteratee
         Data.ByteString.Internal.ByteString
         GHC.Types.IO
         (Snap.Internal.Types.SnapResult
            (Snap.Internal.Http.Types.Request,
             Snap.Snaplet.Internal.Types.Snaplet Application.App,
             Snap.Snaplet.Internal.Types.Snaplet Application.App),
          Snap.Internal.Types.SnapState)
  {- Arity: 4, Strictness: <L,A><L,U><L,U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ w3 :: Control.Lens.Lens.ALens'
                           (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                           (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                   w4 :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                   w5 :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                   w6 :: Snap.Internal.Types.SnapState ->
                 Site.$wa6 w4 w5 w6) -}
21fec6367ebf25df763d065bacd2e37f
  app9 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "/questions/random"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
30784d02d991b42a60679b33d3b957f6
  bc_end :: Site.BareClue -> GHC.Types.Int
  RecSel Site.BareClue
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.BareClue ->
                 case ds of wild { Site.BareClue ds1 ds2 -> ds2 }) -}
6aae80f619c9b8b300f7d12fa362f8d1
  bc_start :: Site.BareClue -> GHC.Types.Int
  RecSel Site.BareClue
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.BareClue ->
                 case ds of wild { Site.BareClue ds1 ds2 -> ds1 }) -}
19b2e27e8ca36d318287ee12c2b780e6
  content :: Site.Clue -> Data.Text.Internal.Text
  RecSel Site.Clue
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSL),1*U(A,A,A,1*U(U,U,U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.Clue ->
                 case ds of wild { Site.Clue ds1 ds2 ds3 ds4 ds5 -> ds4 }) -}
7da9f876962f1302da8136c5658e42cd
  packet :: Site.Clue -> GHC.Types.Int
  RecSel Site.Clue
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLL),1*U(A,A,1*U(U),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.Clue ->
                 case ds of wild { Site.Clue ds1 ds2 ds3 ds4 ds5 -> ds3 }) -}
f850cf054c0543304223a42ce823a05c
  q_answer :: Site.Question -> Data.Text.Internal.Text
  RecSel Site.Question
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLS),1*U(A,A,A,A,1*U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.Question ->
                 case ds of wild { Site.Question ds1 ds2 ds3 ds4 ds5 -> ds5 }) -}
2993788f8dc2719a24d29dea86db13ca
  q_content :: Site.Question -> [Data.Text.Internal.Text]
  RecSel Site.Question
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.Question ->
                 case ds of wild { Site.Question ds1 ds2 ds3 ds4 ds5 -> ds4 }) -}
6e4f532947a580f60441635181a3b0ab
  q_packet :: Site.Question -> GHC.Types.Int
  RecSel Site.Question
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLL),1*U(A,A,1*U(U),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.Question ->
                 case ds of wild { Site.Question ds1 ds2 ds3 ds4 ds5 -> ds3 }) -}
497e42752b4dd2ed94d6c73885999685
  q_tournament :: Site.Question -> Data.Text.Internal.Text
  RecSel Site.Question
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(U,U,U),A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.Question ->
                 case ds of wild { Site.Question ds1 ds2 ds3 ds4 ds5 -> ds1 }) -}
fbf84cac6524fc2f62f1b22c2c5074aa
  q_year :: Site.Question -> GHC.Types.Int
  RecSel Site.Question
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLL),1*U(A,1*U(U),A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.Question ->
                 case ds of wild { Site.Question ds1 ds2 ds3 ds4 ds5 -> ds2 }) -}
d1bf7ba9105182517b797908b8bf35e7
  rawClueAnswer :: Site.RawClue -> Data.Text.Internal.Text
  RecSel Site.RawClue
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U(U,U,U),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.RawClue ->
                 case ds of wild { Site.RawClue ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
dc1c65d9b9319f986f620de1efc26747
  rawClueContent :: Site.RawClue -> Data.Text.Internal.Text
  RecSel Site.RawClue
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U(U,U,U),A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.RawClue ->
                 case ds of wild { Site.RawClue ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
03c344185107173a49c19d691af87729
  rawClueEndIndex :: Site.RawClue -> GHC.Types.Int
  RecSel Site.RawClue
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.RawClue ->
                 case ds of wild { Site.RawClue ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
ab54acb15f3926c3aa2b97b4aafa41a7
  rawClueName :: Site.RawClue -> Data.Text.Internal.Text
  RecSel Site.RawClue
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U(U,U,U),A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.RawClue ->
                 case ds of wild { Site.RawClue ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds1 }) -}
e09f6638bad8860e93f966f1008ff0fb
  rawCluePacket :: Site.RawClue -> GHC.Types.Int
  RecSel Site.RawClue
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U(U),A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.RawClue ->
                 case ds of wild { Site.RawClue ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
32da4983c33b63c3b8e682adeed84dbf
  rawClueStartIndex :: Site.RawClue -> GHC.Types.Int
  RecSel Site.RawClue
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U(U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.RawClue ->
                 case ds of wild { Site.RawClue ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
57ba20bd22d8feb8630132f9922f77eb
  rawClueYear :: Site.RawClue -> GHC.Types.Int
  RecSel Site.RawClue
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U(U),A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.RawClue ->
                 case ds of wild { Site.RawClue ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
5604f4599f260105afaaf0f44684c71c
  rawq_answer :: Site.RawQuestion -> Data.Text.Internal.Text
  RecSel Site.RawQuestion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.RawQuestion ->
                 case ds of wild { Site.RawQuestion ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
657ebda8b46907a120588babe049b7b5
  rawq_content :: Site.RawQuestion -> Data.Text.Internal.Text
  RecSel Site.RawQuestion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U(U,U,U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.RawQuestion ->
                 case ds of wild { Site.RawQuestion ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
b6e87628162420ed8c66a1a2a39731dc
  rawq_id :: Site.RawQuestion -> GHC.Types.Int
  RecSel Site.RawQuestion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U(U),A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.RawQuestion ->
                 case ds of wild { Site.RawQuestion ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds1 }) -}
baf0f839fae18adc6f5fb9e5772a30e9
  rawq_name :: Site.RawQuestion -> Data.Text.Internal.Text
  RecSel Site.RawQuestion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U(U,U,U),A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.RawQuestion ->
                 case ds of wild { Site.RawQuestion ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds2 }) -}
ebc0c8f67353d3177c23906997172510
  rawq_number :: Site.RawQuestion -> GHC.Types.Int
  RecSel Site.RawQuestion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U(U),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.RawQuestion ->
                 case ds of wild { Site.RawQuestion ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
dbecf51c3368df8191eee6e34761378b
  rawq_year :: Site.RawQuestion -> GHC.Types.Int
  RecSel Site.RawQuestion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U(U),A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.RawQuestion ->
                 case ds of wild { Site.RawQuestion ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
3a68564c3e57676b32c1815c16bbe941
  routes ::
    [(Data.ByteString.Internal.ByteString,
      Snap.Snaplet.Internal.Types.Handler
        Application.App Application.App ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.ByteString.Internal.ByteString,
                      Snap.Snaplet.Internal.Types.Handler
                        Application.App Application.App ())
                   Site.app15
                   Site.app3) -}
57390f2ecf9fdd5828df278f6f0fbdee
  tournament :: Site.Clue -> Data.Text.Internal.Text
  RecSel Site.Clue
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(U,U,U),A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.Clue ->
                 case ds of wild { Site.Clue ds1 ds2 ds3 ds4 ds5 -> ds1 }) -}
e38e78e60017a1f9bb61ade3f751bdb3
  year :: Site.Clue -> GHC.Types.Int
  RecSel Site.Clue
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLL),1*U(A,1*U(U),A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Site.Clue ->
                 case ds of wild { Site.Clue ds1 ds2 ds3 ds4 ds5 -> ds2 }) -}
instance Database.PostgreSQL.Simple.FromRow.FromRow [Site.BareClue]
  = Site.$fFromRowBareClue
instance Database.PostgreSQL.Simple.FromRow.FromRow [Site.RawClue]
  = Site.$fFromRowRawClue
instance Database.PostgreSQL.Simple.FromRow.FromRow [Site.RawQuestion]
  = Site.$fFromRowRawQuestion
instance GHC.Show.Show [Site.Clue] = Site.$fShowClue
instance GHC.Show.Show [Site.Question] = Site.$fShowQuestion
instance Data.Aeson.Types.Class.ToJSON [Site.Clue]
  = Site.$fToJSONClue
instance Data.Aeson.Types.Class.ToJSON [Site.Question]
  = Site.$fToJSONQuestion
"SPEC/Site $fAlternativeHandler @ App @ App" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                (Snap.Snaplet.Internal.Types.Handler
                                                                                   Application.App
                                                                                   Application.App)
  Snap.Snaplet.Internal.Types.$fAlternativeHandler @ Application.App
                                                   @ Application.App
                                                   $dApplicative
  = Site.$s$fAlternativeHandler
"SPEC/Site $fApplicativeHandler @ App @ App" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                            (Snap.Snaplet.Internal.Types.Handler
                                                                               Application.App
                                                                               Application.App)
  Snap.Snaplet.Internal.Types.$fApplicativeHandler @ Application.App
                                                   @ Application.App
                                                   $dFunctor
  = Site.$s$fAlternativeHandler_$s$fApplicativeHandler
"SPEC/Site $fHasPostgresHandler @ App" [ALWAYS] forall $dMonadCatchIO :: Control.Monad.CatchIO.MonadCatchIO
                                                                           (Snap.Snaplet.Internal.Types.Handler
                                                                              Application.App
                                                                              Application.App)
  Application.$fHasPostgresHandler @ Application.App $dMonadCatchIO
  = Site.$s$fHasPostgresHandler
"SPEC/Site $fMonadCatchIOHandler @ App @ App" [ALWAYS] forall $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                             (Snap.Snaplet.Internal.Types.Handler
                                                                                Application.App
                                                                                Application.App)
  Snap.Snaplet.Internal.Types.$fMonadCatchIOHandler @ Application.App
                                                    @ Application.App
                                                    $dMonadIO
  = Site.$s$fHasPostgresHandler_$s$fMonadCatchIOHandler
"SPEC/Site $fMonadHandler @ App @ App" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                          (Snap.Snaplet.Internal.Types.Handler
                                                                             Application.App
                                                                             Application.App)
  Snap.Snaplet.Internal.Types.$fMonadHandler @ Application.App
                                             @ Application.App
                                             $dApplicative
  = Site.$s$fHasPostgresHandler_$s$fMonadHandler
"SPEC/Site $fMonadIOHandler @ App @ App" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                      (Snap.Snaplet.Internal.Types.Handler
                                                                         Application.App
                                                                         Application.App)
  Snap.Snaplet.Internal.Types.$fMonadIOHandler @ Application.App
                                               @ Application.App
                                               $dMonad
  = Site.$s$fHasPostgresHandler_$s$fMonadIOHandler
"SPEC/Site $fMonadPlusHandler @ App @ App" [ALWAYS] forall $dAlternative :: GHC.Base.Alternative
                                                                              (Snap.Snaplet.Internal.Types.Handler
                                                                                 Application.App
                                                                                 Application.App)
                                                           $dMonad :: GHC.Base.Monad
                                                                        (Snap.Snaplet.Internal.Types.Handler
                                                                           Application.App
                                                                           Application.App)
  Snap.Snaplet.Internal.Types.$fMonadPlusHandler @ Application.App
                                                 @ Application.App
                                                 $dAlternative
                                                 $dMonad
  = Site.$s$fMonadPlusHandler
"SPEC/Site $fMonadSnapHandler @ App @ App" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                        (Snap.Snaplet.Internal.Types.Handler
                                                                           Application.App
                                                                           Application.App)
                                                           $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                          (Snap.Snaplet.Internal.Types.Handler
                                                                             Application.App
                                                                             Application.App)
                                                           $dMonadCatchIO :: Control.Monad.CatchIO.MonadCatchIO
                                                                               (Snap.Snaplet.Internal.Types.Handler
                                                                                  Application.App
                                                                                  Application.App)
                                                           $dMonadPlus :: GHC.Base.MonadPlus
                                                                            (Snap.Snaplet.Internal.Types.Handler
                                                                               Application.App
                                                                               Application.App)
                                                           $dFunctor :: GHC.Base.Functor
                                                                          (Snap.Snaplet.Internal.Types.Handler
                                                                             Application.App
                                                                             Application.App)
                                                           $dApplicative :: GHC.Base.Applicative
                                                                              (Snap.Snaplet.Internal.Types.Handler
                                                                                 Application.App
                                                                                 Application.App)
                                                           $dAlternative :: GHC.Base.Alternative
                                                                              (Snap.Snaplet.Internal.Types.Handler
                                                                                 Application.App
                                                                                 Application.App)
  Snap.Snaplet.Internal.Types.$fMonadSnapHandler @ Application.App
                                                 @ Application.App
                                                 $dMonad
                                                 $dMonadIO
                                                 $dMonadCatchIO
                                                 $dMonadPlus
                                                 $dFunctor
                                                 $dApplicative
                                                 $dAlternative
  = Site.$s$fMonadSnapHandler
"SPEC/Site pg @ (->) @ (Pretext
                         (->) (Snaplet Postgres) (Snaplet Postgres))" [ALWAYS] forall $dProfunctor :: Data.Profunctor.Unsafe.Profunctor
                                                                                                                                        (->)
                                                                                                                      $dFunctor :: GHC.Base.Functor
                                                                                                                                     (Control.Lens.Internal.Context.Pretext
                                                                                                                                        (->)
                                                                                                                                        (Snap.Snaplet.Internal.Types.Snaplet
                                                                                                                                           Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                                                                                                                                        (Snap.Snaplet.Internal.Types.Snaplet
                                                                                                                                           Snap.Snaplet.PostgresqlSimple.Internal.Postgres))
  Application.pg @ (->)
                 @ (Control.Lens.Internal.Context.Pretext
                      (->)
                      (Snap.Snaplet.Internal.Types.Snaplet
                         Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                      (Snap.Snaplet.Internal.Types.Snaplet
                         Snap.Snaplet.PostgresqlSimple.Internal.Postgres))
                 $dProfunctor
                 $dFunctor
  = Site.$spg
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

