
==================== FINAL INTERFACE ====================
2016-04-09 18:20:12.721062 UTC

interface main@main:Application 7103
  interface hash: fcef7aeea49a3c53faa1891319bde224
  ABI hash: 86591734b5a18689f41d9722d8a67c57
  export-list hash: 08ce433f06e5cf5960a336800fdc2965
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c21ad4902b46635c38dfd7cdea78c605
  sig of: Nothing
  used TH splices: True
  where
exports:
  Application.pg
  Application.App{Application.App Application._pg}
module dependencies:
package dependencies: MonadCatchIO-transformers-0.3.1.3@Monad_BSHaJtnktpVL405Pj6vJr0
                      MonadRandom-0.4.2.2@Monad_LbaXJr6Nhqd7LxAzlRvHiO
                      StateVar-1.1.0.3@State_8WYLUQJECQz8PFb9p2aPSq
                      adjunctions-4.3@adjun_IXq6HBAgCNJ4fv6ViFbOEG
                      aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      attoparsec-enumerator-0.3.4@attop_4GSVinFkr5CKwtahYaIeFt
                      attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG base-4.8.2.0
                      base-orphans-0.5.3@baseo_4lH3gPOjJvdDgDLhAat0cc
                      bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      blaze-builder-0.4.0.1@blaze_4KI2nf4lf9oHEgXiILyTYj
                      blaze-builder-enumerator-0.2.1.0@blaze_Gmwy3P2062lB78VkiFsmA7
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      bytestring-mmap-0.2.2@bytes_838cPOnJ61dLulQP6D7UWj
                      case-insensitive-1.2.0.6@casei_05l5iiwk2FiGu4DeOqOIxC
                      comonad-4.2.7.2@comon_GX82l6LGAtU4pl76h7qRY6
                      configurator-0.3.0.0@confi_KJ5Lf5DeWVQFvN0NbO9dzR
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      contravariant-1.4@contr_5fhCu9dzdEdG1EXQYocttQ
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      directory-1.2.2.0@direc_0hFG6ZxK1nk4zsyOqbNHfm
                      directory-tree-0.12.0@direc_858T1RVMWwiLQQo0odiu52
                      distributive-0.5.0.2@distr_CdoGNL0xpvT8Yg8UOP51Po
                      dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui
                      either-4.4.1@eithe_21wZvADiaCZJGSh3HFMsE2
                      enumerator-0.4.20@enume_LyDnEQ6F69uDubH559Giin
                      exceptions-0.8.2.1@excep_6lgwjdgwblY7rzh5s6SLd8
                      extensible-exceptions-0.1.1.4@exten_FEBYnjUcabpEXD3JqlYlJc
                      filepath-1.4.0.0@filep_Ey7a1in9roBAE8bUFJ5R9m
                      free-4.12.4@free_K9MhAv0PwNjBU5Y43yg0qv ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      kan-extensions-4.2.3@kanex_FxwYeVFcp2I5Ahrww6IonA
                      lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX
                      mmorph-1.0.6@mmorp_42KUkOfzC6q3qCtAMiSHam
                      monad-control-1.0.0.5@monad_0V0Z5ArSaI68lPP0A0bpaP
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ
                      postgresql-libpq-0.9.1.1@postg_6f9D1As2FCe0fjZpXXvHvS
                      postgresql-simple-0.5.1.2@postg_9k9Uw6R9foNDbRYAVYjlMk
                      prelude-extras-0.4.0.3@prelu_1gQpKVfMHul71LsAFgGRhv
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      profunctors-5.2@profu_GJlbIQw4OdtCsUYHFjoJGV
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      reflection-2.1.2@refle_Is9SiIf9zRHG2wDNDxPaS9
                      resource-pool-catchio-0.2.1.0@resou_ID6yEN88zbvJjya9WklwSY
                      scientific-0.3.4.6@scien_5s26qRhE5w04kI4pP1Rtwm
                      semigroups-0.18.1@semig_EApcHsXPsrRKUkxxoKR3HO
                      semigroupoids-5.0.1@semig_FkGTCGQGMG5KEDQBdPQmqM
                      snap-0.14.0.7@snap_0lWB4JeqM0GGHi5xffSop5
                      snap-core-0.9.8.0@snapc_CMfJOiVQz5y9Hf3voaEWtD
                      snaplet-postgresql-simple-0.6.0.4@snapl_FYaolfHNtTcHRJGIzQgYbl
                      snap-server-0.9.5.1@snaps_90aCcMkQiIf81jaDMWhGhx
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      streaming-commons-0.1.15.2@strea_0Pv1kz8leJoAmtjyRTUWHG
                      tagged-0.8.3@tagge_5cptKNCoGdxJM6eqqNERxD template-haskell-2.10.0.0
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-base-0.4.4@trans_74WedXVmfaHHDJItmBRTVp
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
                      unix-compat-0.4.1.4@unixc_Km8uiabmElX5mrb8D4Fywe
                      unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j
                      uuid-types-1.0.3@uuidt_1jYi9RR4Gf08rGU1w6xxPr
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
                      zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu
                      zlib-bindings-0.1.1.5@zlibb_4TLHzVhj5c37rqLzkivtLr
                      zlib-enum-0.2.3.1@zlibe_0vMFCFBtq5X86FS1uoJqxg
orphans: MonadRandom-0.4.2.2@Monad_LbaXJr6Nhqd7LxAzlRvHiO:Control.Monad.Random
         aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Generic
         aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Instances
         attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.Text.Internal
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         base-orphans-0.5.3@baseo_4lH3gPOjJvdDgDLhAat0cc:Data.Orphans
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         configurator-0.3.0.0@confi_KJ5Lf5DeWVQFvN0NbO9dzR:Data.Configurator.Instances
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket.Types
         reflection-2.1.2@refle_Is9SiIf9zRHG2wDNDxPaS9:Data.Reflection
         snap-core-0.9.8.0@snapc_CMfJOiVQz5y9Hf3voaEWtD:Snap.Internal.Instances
         snap-core-0.9.8.0@snapc_CMfJOiVQz5y9Hf3voaEWtD:Snap.Iteratee
         snaplet-postgresql-simple-0.6.0.4@snapl_FYaolfHNtTcHRJGIzQgYbl:Snap.Snaplet.PostgresqlSimple
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjun_IXq6HBAgCNJ4fv6ViFbOEG:Data.Functor.Rep
                         attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.Internal.Types
                         base-4.8.2.0:Control.Applicative base-4.8.2.0:Data.Either
                         base-4.8.2.0:Data.Functor.Identity base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:Data.Void
                         base-4.8.2.0:GHC.Exts base-4.8.2.0:GHC.Generics
                         base-4.8.2.0:GHC.TypeLits
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Biff
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Clown
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Flip
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Join
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Joker
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Product
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Sum
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Tannen
                         bifunctors-5.2@bifun_44HawZQn5UTHnPlQaJpKgA:Data.Bifunctor.Wrapped
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui:Data.DList
                         either-4.4.1@eithe_21wZvADiaCZJGSh3HFMsE2:Control.Monad.Trans.Either
                         kan-extensions-4.2.3@kanex_FxwYeVFcp2I5Ahrww6IonA:Data.Functor.Yoneda
                         lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens.At
                         lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens.Internal.Indexed
                         lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens.Internal.Zoom
                         lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens.Reified
                         lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens.Tuple
                         lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens.Wrapped
                         monad-control-1.0.0.5@monad_0V0Z5ArSaI68lPP0A0bpaP:Control.Monad.Trans.Control
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         profunctors-5.2@profu_GJlbIQw4OdtCsUYHFjoJGV:Data.Profunctor.Rep
                         semigroups-0.18.1@semig_EApcHsXPsrRKUkxxoKR3HO:Data.List.NonEmpty
                         semigroups-0.18.1@semig_EApcHsXPsrRKUkxxoKR3HO:Data.Semigroup
                         tagged-0.8.3@tagge_5cptKNCoGdxJM6eqqNERxD:Data.Tagged
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashSet
                         uuid-types-1.0.3@uuidt_1jYi9RR4Gf08rGU1w6xxPr:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuidt_1jYi9RR4Gf08rGU1w6xxPr:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Storable
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
                         zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu:Codec.Compression.Zlib.Stream
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens 709c8a87985878855da3afbbdac788b4
import  -/  lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens.Iso b225ef69ab2a3487347cf09d68628b55
import  -/  lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens.Setter b39b8c1ad875c56afb7fddb5730e26d8
import  -/  lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens.TH 227609718143dacb48b50696c7bd183a
import  -/  lens-4.13@lens_42tBvdePJNq8h4cDMy1EGX:Control.Lens.Type dbbcac520ebb9be1efa961b79d5e9808
import  -/  mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8:Control.Monad.Reader 5d43a64348db8e4860adc3213d905c28
import  -/  mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8:Control.Monad.Reader.Class e7b714ea62f67bcf45e3abed40e559d5
import  -/  mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8:Control.Monad.State 3c8114545920fee1e57c3d7a07c2d0d7
import  -/  mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8:Control.Monad.State.Class 71cb030be928f92f7d8f2a86db6e1cae
import  -/  snap-0.14.0.7@snap_0lWB4JeqM0GGHi5xffSop5:Snap 17a4b3545a80755ae967c69e01ed30af
import  -/  snap-0.14.0.7@snap_0lWB4JeqM0GGHi5xffSop5:Snap.Snaplet 47dce742aae81b62c5df8bcdd5d39bcd
import  -/  snap-0.14.0.7@snap_0lWB4JeqM0GGHi5xffSop5:Snap.Snaplet.Internal.Types dc70894eea7be3c8456318ec3832e4f6
import  -/  snaplet-postgresql-simple-0.6.0.4@snapl_FYaolfHNtTcHRJGIzQgYbl:Snap.Snaplet.PostgresqlSimple 3a282122ef0441cf73ffde93fc3d0ac5
import  -/  snaplet-postgresql-simple-0.6.0.4@snapl_FYaolfHNtTcHRJGIzQgYbl:Snap.Snaplet.PostgresqlSimple.Internal 8ea4b9f939b2158489512991dbb1884c
14a49c348781e6a568cef0834dc05c2d
  $fHasPostgresHandler ::
    Control.Monad.CatchIO.MonadCatchIO
      (Snap.Snaplet.Internal.Types.Handler b Application.App) =>
    Snap.Snaplet.PostgresqlSimple.Internal.HasPostgres
      (Snap.Snaplet.Internal.Types.Handler b Application.App)
  DFunId[1]
  {- Arity: 1, Strictness: <L,U(U(U(U,U,U,U,U),U),U,U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ b
                      $dMonadCatchIO :: Control.Monad.CatchIO.MonadCatchIO
                                          (Snap.Snaplet.Internal.Types.Handler b Application.App).
                  @ (Snap.Snaplet.Internal.Types.Handler b Application.App)
                  $dMonadCatchIO
                  (Application.$fHasPostgresHandler_$cgetPostgresState
                     @ b
                     $dMonadCatchIO)
                  (Application.$fHasPostgresHandler_$csetLocalPostgresState
                     @ b
                     $dMonadCatchIO) -}
14a49c348781e6a568cef0834dc05c2d
  $fHasPostgresHandler1 ::
    Control.Monad.CatchIO.MonadCatchIO
      (Snap.Snaplet.Internal.Types.Handler b Application.App) =>
    Control.Lens.Lens.ALens'
      (Snap.Snaplet.Internal.Types.Snaplet b)
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Snaplet.Internal.Types.Snaplet b
    -> Snap.Internal.Types.Snap
         (Snap.Snaplet.PostgresqlSimple.Internal.Postgres,
          Snap.Snaplet.Internal.Types.Snaplet Application.App,
          Snap.Snaplet.Internal.Types.Snaplet b)
  {- Arity: 4, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ b
                   $dMonadCatchIO :: Control.Monad.CatchIO.MonadCatchIO
                                       (Snap.Snaplet.Internal.Types.Handler b Application.App)
                   eta :: Control.Lens.Lens.ALens'
                            (Snap.Snaplet.Internal.Types.Snaplet b)
                            (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                   eta1 :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                   eta2 :: Snap.Snaplet.Internal.Types.Snaplet b ->
                 Application.$fHasPostgresHandler2 @ b eta eta1 eta2) -}
14a49c348781e6a568cef0834dc05c2d
  $fHasPostgresHandler2 ::
    Control.Lens.Lens.ALens'
      (Snap.Snaplet.Internal.Types.Snaplet b)
      (Snap.Snaplet.Internal.Types.Snaplet Application.App)
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Snap.Snaplet.Internal.Types.Snaplet b
    -> Snap.Internal.Types.Snap
         (Snap.Snaplet.PostgresqlSimple.Internal.Postgres,
          Snap.Snaplet.Internal.Types.Snaplet Application.App,
          Snap.Snaplet.Internal.Types.Snaplet b)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ @ b
                   eta1 :: Control.Lens.Lens.ALens'
                             (Snap.Snaplet.Internal.Types.Snaplet b)
                             (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                   eta2 :: Snap.Snaplet.Internal.Types.Snaplet Application.App
                   eta3 :: Snap.Snaplet.Internal.Types.Snaplet b ->
                 Snap.Snaplet.Internal.Lensed.with1
                   @ (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                   @ (Snap.Snaplet.Internal.Types.Snaplet
                        Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                   @ (Snap.Snaplet.Internal.Types.Snaplet b)
                   @ Snap.Internal.Types.Snap
                   @ Snap.Snaplet.PostgresqlSimple.Internal.Postgres
                   Snap.Internal.Types.$fMonadSnap
                   Application.$fHasPostgresHandler4
                   (Application.$fHasPostgresHandler3 @ b)
                     `cast`
                   (Trans
                        (<Control.Lens.Lens.ALens'
                            (Snap.Snaplet.Internal.Types.Snaplet b)
                            (Snap.Snaplet.Internal.Types.Snaplet
                               Snap.Snaplet.PostgresqlSimple.Internal.Postgres)>_R
                         ->_R <Snap.Snaplet.Internal.Types.Snaplet
                                 Snap.Snaplet.PostgresqlSimple.Internal.Postgres>_R
                         ->_R <Snap.Snaplet.Internal.Types.Snaplet b>_R
                         ->_R Trans
                                  (Sym (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                                            <Snap.Internal.Types.SnapState>_N
                                            <Data.Enumerator.Internal.Iteratee
                                               Data.ByteString.Internal.ByteString GHC.Types.IO>_R
                                            <Snap.Internal.Types.SnapResult
                                               (Snap.Snaplet.PostgresqlSimple.Internal.Postgres,
                                                Snap.Snaplet.Internal.Types.Snaplet
                                                  Snap.Snaplet.PostgresqlSimple.Internal.Postgres,
                                                Snap.Snaplet.Internal.Types.Snaplet b)>_N))
                                  (Sym (Snap.Internal.Types.NTCo:Snap[0]
                                            <(Snap.Snaplet.PostgresqlSimple.Internal.Postgres,
                                              Snap.Snaplet.Internal.Types.Snaplet
                                                Snap.Snaplet.PostgresqlSimple.Internal.Postgres,
                                              Snap.Snaplet.Internal.Types.Snaplet b)>_N)))
                        (Sym (Snap.Snaplet.Internal.Lensed.NTCo:Lensed[0]
                                  <Snap.Snaplet.Internal.Types.Snaplet b>_N
                                  <Snap.Snaplet.Internal.Types.Snaplet
                                     Snap.Snaplet.PostgresqlSimple.Internal.Postgres>_N
                                  <Snap.Internal.Types.Snap>_R
                                  <Snap.Snaplet.PostgresqlSimple.Internal.Postgres>_N)))
                   eta1
                   eta2
                   eta3) -}
cad943e5e80a06d37ebd116e866d8d95
  $fHasPostgresHandler3 ::
    Control.Lens.Lens.ALens'
      (Snap.Snaplet.Internal.Types.Snaplet b)
      (Snap.Snaplet.Internal.Types.Snaplet
         Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
    -> Snap.Snaplet.Internal.Types.Snaplet
         Snap.Snaplet.PostgresqlSimple.Internal.Postgres
    -> Snap.Snaplet.Internal.Types.Snaplet b
    -> Snap.Internal.Types.SnapState
    -> Data.Enumerator.Internal.Iteratee
         Data.ByteString.Internal.ByteString
         GHC.Types.IO
         (Snap.Internal.Types.SnapResult
            (Snap.Snaplet.PostgresqlSimple.Internal.Postgres,
             Snap.Snaplet.Internal.Types.Snaplet
               Snap.Snaplet.PostgresqlSimple.Internal.Postgres,
             Snap.Snaplet.Internal.Types.Snaplet b),
          Snap.Internal.Types.SnapState)
  {- Arity: 4, Strictness: <L,A><L,U><L,U><L,U>,
     Unfolding: InlineRule (4, True, True)
                (\ @ b
                   eta :: Control.Lens.Lens.ALens'
                            (Snap.Snaplet.Internal.Types.Snaplet b)
                            (Snap.Snaplet.Internal.Types.Snaplet
                               Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                   eta1 :: Snap.Snaplet.Internal.Types.Snaplet
                             Snap.Snaplet.PostgresqlSimple.Internal.Postgres
                   eta2 :: Snap.Snaplet.Internal.Types.Snaplet b
                   eta3 :: Snap.Internal.Types.SnapState ->
                 Snap.Snaplet.Internal.Types.$wa4
                   @ Snap.Snaplet.PostgresqlSimple.Internal.Postgres
                   @ Snap.Snaplet.PostgresqlSimple.Internal.Postgres
                   @ b
                   (Snap.Snaplet.Internal.Types._snapletValue
                      @ Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                   eta1
                   eta2
                   eta3) -}
14a49c348781e6a568cef0834dc05c2d
  $fHasPostgresHandler4 ::
    (Snap.Snaplet.Internal.Types.Snaplet
       Snap.Snaplet.PostgresqlSimple.Internal.Postgres
     -> Control.Lens.Internal.Context.Pretext
          (->)
          (Snap.Snaplet.Internal.Types.Snaplet
             Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
          (Snap.Snaplet.Internal.Types.Snaplet
             Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
          (Snap.Snaplet.Internal.Types.Snaplet
             Snap.Snaplet.PostgresqlSimple.Internal.Postgres))
    -> Snap.Snaplet.Internal.Types.Snaplet Application.App
    -> Control.Lens.Internal.Context.Pretext
         (->)
         (Snap.Snaplet.Internal.Types.Snaplet
            Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
         (Snap.Snaplet.Internal.Types.Snaplet
            Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
         (Snap.Snaplet.Internal.Types.Snaplet Application.App)
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ eta :: Snap.Snaplet.Internal.Types.Snaplet
                            Snap.Snaplet.PostgresqlSimple.Internal.Postgres
                          -> Control.Lens.Internal.Context.Pretext
                               (->)
                               (Snap.Snaplet.Internal.Types.Snaplet
                                  Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                               (Snap.Snaplet.Internal.Types.Snaplet
                                  Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                               (Snap.Snaplet.Internal.Types.Snaplet
                                  Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                   eta1 :: Snap.Snaplet.Internal.Types.Snaplet Application.App ->
                 case eta1 of wild { Snap.Snaplet.Internal.Types.Snaplet x x1 x2 ->
                 let {
                   f :: Application.App
                        -> Snap.Snaplet.Internal.Types.Snaplet Application.App
                     {- Arity: 1, Strictness: <L,U>m,
                        Unfolding: InlineRule (1, True, False)
                                   (\ y :: Application.App ->
                                    Snap.Snaplet.Internal.Types.Snaplet @ Application.App x x1 y) -}
                   = \ y :: Application.App ->
                     Snap.Snaplet.Internal.Types.Snaplet @ Application.App x x1 y
                 } in
                 let {
                   ds :: Control.Lens.Internal.Context.Pretext
                           (->)
                           (Snap.Snaplet.Internal.Types.Snaplet
                              Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                           (Snap.Snaplet.Internal.Types.Snaplet
                              Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                           (Snap.Snaplet.Internal.Types.Snaplet
                              Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                   = eta (case x2 of wild1 { Application.App x4 -> x4 })
                 } in
                 (\ @ (f1 :: * -> *) $dFunctor :: GHC.Base.Functor f1 ->
                  let {
                    f2 :: f1 Application.App
                          -> f1 (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                    = GHC.Base.fmap
                        @ f1
                        $dFunctor
                        @ Application.App
                        @ (Snap.Snaplet.Internal.Types.Snaplet Application.App)
                        f
                  } in
                  let {
                    f4 :: f1 (Snap.Snaplet.Internal.Types.Snaplet
                                Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                          -> f1 Application.App
                    = GHC.Base.fmap
                        @ f1
                        $dFunctor
                        @ (Snap.Snaplet.Internal.Types.Snaplet
                             Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                        @ Application.App
                        Application.App
                  } in
                  let {
                    g :: (Snap.Snaplet.Internal.Types.Snaplet
                            Snap.Snaplet.PostgresqlSimple.Internal.Postgres
                          -> f1 (Snap.Snaplet.Internal.Types.Snaplet
                                   Snap.Snaplet.PostgresqlSimple.Internal.Postgres))
                         -> f1 (Snap.Snaplet.Internal.Types.Snaplet
                                  Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                    = ds
                        `cast`
                      (Control.Lens.Internal.Context.NTCo:Pretext[0]
                           <(->)>_R
                           <Snap.Snaplet.Internal.Types.Snaplet
                              Snap.Snaplet.PostgresqlSimple.Internal.Postgres>_N
                           <Snap.Snaplet.Internal.Types.Snaplet
                              Snap.Snaplet.PostgresqlSimple.Internal.Postgres>_N
                           <Snap.Snaplet.Internal.Types.Snaplet
                              Snap.Snaplet.PostgresqlSimple.Internal.Postgres>_N)
                        @ f1
                        $dFunctor
                  } in
                  \ x4 :: Snap.Snaplet.Internal.Types.Snaplet
                            Snap.Snaplet.PostgresqlSimple.Internal.Postgres
                          -> f1 (Snap.Snaplet.Internal.Types.Snaplet
                                   Snap.Snaplet.PostgresqlSimple.Internal.Postgres) ->
                  f2 (f4 (g x4)))
                   `cast`
                 (Sym (Control.Lens.Internal.Context.NTCo:Pretext[0]
                           <(->)>_R
                           <Snap.Snaplet.Internal.Types.Snaplet
                              Snap.Snaplet.PostgresqlSimple.Internal.Postgres>_N
                           <Snap.Snaplet.Internal.Types.Snaplet
                              Snap.Snaplet.PostgresqlSimple.Internal.Postgres>_N
                           <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N)) }) -}
14a49c348781e6a568cef0834dc05c2d
  $fHasPostgresHandler_$cgetPostgresState ::
    Control.Monad.CatchIO.MonadCatchIO
      (Snap.Snaplet.Internal.Types.Handler b Application.App) =>
    Snap.Snaplet.Internal.Types.Handler
      b Application.App Snap.Snaplet.PostgresqlSimple.Internal.Postgres
  {- Arity: 4, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Application.$fHasPostgresHandler1
                  `cast`
                (forall b.
                 <Control.Monad.CatchIO.MonadCatchIO
                    (Snap.Snaplet.Internal.Types.Handler b Application.App)>_R
                 ->_R Trans
                          (Sym (Snap.Snaplet.Internal.Lensed.NTCo:Lensed[0]
                                    <Snap.Snaplet.Internal.Types.Snaplet b>_N
                                    <Snap.Snaplet.Internal.Types.Snaplet Application.App>_N
                                    <Snap.Internal.Types.Snap>_R
                                    <Snap.Snaplet.PostgresqlSimple.Internal.Postgres>_N))
                          (Sym (Snap.Snaplet.Internal.Types.NTCo:Handler[0]
                                    <b>_N
                                    <Application.App>_N) <Snap.Snaplet.PostgresqlSimple.Internal.Postgres>_N)) -}
14a49c348781e6a568cef0834dc05c2d
  $fHasPostgresHandler_$csetLocalPostgresState ::
    Control.Monad.CatchIO.MonadCatchIO
      (Snap.Snaplet.Internal.Types.Handler b Application.App) =>
    forall a.
    Snap.Snaplet.PostgresqlSimple.Internal.Postgres
    -> Snap.Snaplet.Internal.Types.Handler b Application.App a
    -> Snap.Snaplet.Internal.Types.Handler b Application.App a
  {- Arity: 3,
     Strictness: <S(S(S(LC(C(S))LLL)L)LLL),1*U(1*U(1*U(A,C(C1(U)),C(C1(U)),C(U),A),A),A,A,A)><L,U><L,U>,
     Unfolding: (\ @ b
                   $dMonadCatchIO :: Control.Monad.CatchIO.MonadCatchIO
                                       (Snap.Snaplet.Internal.Types.Handler b Application.App)
                   @ a2
                   eta :: Snap.Snaplet.PostgresqlSimple.Internal.Postgres
                   eta1 :: Snap.Snaplet.Internal.Types.Handler b Application.App a2 ->
                 Snap.Snaplet.Internal.Types.$fMonadReadervHandler_$clocal
                   @ Application.App
                   @ b
                   (Control.Monad.IO.Class.$p1MonadIO
                      @ (Snap.Snaplet.Internal.Types.Handler b Application.App)
                      (Control.Monad.CatchIO.$p1MonadCatchIO
                         @ (Snap.Snaplet.Internal.Types.Handler b Application.App)
                         $dMonadCatchIO))
                   @ a2
                   (\ x :: Application.App ->
                    Application.App
                      (case x of wild { Application.App x1 ->
                       case x1 of wild1 { Snap.Snaplet.Internal.Types.Snaplet x2 x3 x4 ->
                       Snap.Snaplet.Internal.Types.Snaplet
                         @ Snap.Snaplet.PostgresqlSimple.Internal.Postgres
                         x2
                         x3
                         eta } }))
                   eta1) -}
14a49c348781e6a568cef0834dc05c2d
  data App
    = App {_pg :: Snap.Snaplet.Internal.Types.Snaplet
                    Snap.Snaplet.PostgresqlSimple.Internal.Postgres}
c55dc31f8845d4f052319897e85f380a
  _pg ::
    Application.App
    -> Snap.Snaplet.Internal.Types.Snaplet
         Snap.Snaplet.PostgresqlSimple.Internal.Postgres
  RecSel Application.App
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Application.App ->
                 case ds of wild { Application.App ds1 -> ds1 }) -}
86a47d249b4258c08378b3329ddd6237
  pg ::
    Control.Lens.Type.Iso'
      Application.App
      (Snap.Snaplet.Internal.Types.Snaplet
         Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(C(C(S))LLLL),1*U(1*C1(C1(U)),A,A,A,A)><L,1*U(1*C1(U),A)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (2, False, False)
                (\ @ (p :: * -> * -> *)
                   @ (f :: * -> *)
                   $dProfunctor :: Data.Profunctor.Unsafe.Profunctor p
                   $dFunctor :: GHC.Base.Functor f ->
                 Data.Profunctor.Unsafe.dimap
                   @ p
                   $dProfunctor
                   @ Application.App
                   @ (Snap.Snaplet.Internal.Types.Snaplet
                        Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                   @ (f (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.PostgresqlSimple.Internal.Postgres))
                   @ (f Application.App)
                   (\ ds :: Application.App ->
                    case ds of wild { Application.App x -> x })
                   (GHC.Base.fmap
                      @ f
                      $dFunctor
                      @ (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.PostgresqlSimple.Internal.Postgres)
                      @ Application.App
                      Application.App)) -}
instance Snap.Snaplet.PostgresqlSimple.Internal.HasPostgres [Snap.Snaplet.Internal.Types.Handler]
  = Application.$fHasPostgresHandler
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

